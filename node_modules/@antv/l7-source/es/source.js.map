{"version":3,"sources":["../src/source.ts"],"names":["SyncHook","extent","EventEmitter","getParser","getTransform","cluster","statMap","getColumn","Source","data","cfg","hooks","init","parser","type","transforms","clusterOptions","enable","radius","maxZoom","zoom","method","originData","rawData","clusterIndex","initCfg","tap","excuteParser","initCluster","executeTrans","options","emit","getClusters","id","getLeaves","Infinity","field","Math","floor","forEach","p","properties","point_count","map","item","points","d","statNum","column","stat","features","feature","length","newFeature","dataArray","find","dataItem","_id","value","name","removeAllListeners","sourceParser","trans","tran","Object","assign","call"],"mappings":";;;;;;;;;;;;;;;;;;AACA,SAASA,QAAT,QAAyB,kBAAzB;AAYA,SAASC,MAAT,QAAuB,gBAAvB;AAQA,SAASC,YAAT,QAA6B,eAA7B;AAKA,SAASC,SAAT,EAAoBC,YAApB,QAAwC,IAAxC;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,SAAT,QAA0B,cAA1B;;IACqBC,M;;;;;AA0BnB,kBAAYC,IAAZ,EAAuBC,GAAvB,EAAyC;AAAA;;AAAA;;AACvC;AADuC,UAzBlCD,IAyBkC;AAAA,UAtBlCR,MAsBkC;AAAA,UApBlCU,KAoBkC,GApB1B;AACbC,MAAAA,IAAI,EAAE,IAAIZ,QAAJ;AADO,KAoB0B;AAAA,UAjBlCa,MAiBkC,GAjBb;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAiBa;AAAA,UAhBlCC,UAgBkC,GAhBP,EAgBO;AAAA,UAflCV,OAekC,GAff,KAee;AAAA,UAdlCW,cAckC,GAdS;AAChDC,MAAAA,MAAM,EAAE,KADwC;AAEhDC,MAAAA,MAAM,EAAE,EAFwC;AAGhDC,MAAAA,OAAO,EAAE,EAHuC;AAIhDC,MAAAA,IAAI,EAAE,CAAC,EAJyC;AAKhDC,MAAAA,MAAM,EAAE;AALwC,KAcT;AAAA,UALjCC,UAKiC;AAAA,UAJjCC,OAIiC;AAAA,UAFjCC,YAEiC;AAGvC,UAAKF,UAAL,GAAkBb,IAAlB;;AACA,UAAKgB,OAAL,CAAaf,GAAb;;AAEA,UAAKC,KAAL,CAAWC,IAAX,CAAgBc,GAAhB,CAAoB,QAApB,EAA8B,YAAM;AAClC,YAAKC,YAAL;AACD,KAFD;;AAGA,UAAKhB,KAAL,CAAWC,IAAX,CAAgBc,GAAhB,CAAoB,SAApB,EAA+B,YAAM;AACnC,YAAKE,WAAL;AACD,KAFD;;AAGA,UAAKjB,KAAL,CAAWC,IAAX,CAAgBc,GAAhB,CAAoB,WAApB,EAAiC,YAAM;AACrC,YAAKG,YAAL;AACD,KAFD;;AAGA,UAAKjB,IAAL;;AAfuC;AAgBxC;;;;4BAEcH,I,EAAWqB,O,EAAsB;AAC9C,WAAKP,OAAL,GAAed,IAAf;AACA,WAAKa,UAAL,GAAkBb,IAAlB;AACA,WAAKgB,OAAL,CAAaK,OAAb;AACA,WAAKlB,IAAL;AACA,WAAKmB,IAAL,CAAU,QAAV;AACD;;;gCACkBX,I,EAAmB;AACpC,aAAO,KAAKI,YAAL,CAAkBQ,WAAlB,CAA8B,KAAK/B,MAAnC,EAA2CmB,IAA3C,CAAP;AACD;;;sCACwBa,E,EAAiB;AACxC,aAAO,KAAKT,YAAL,CAAkBU,SAAlB,CAA4BD,EAA5B,EAAgCE,QAAhC,CAAP;AACD;;;sCACwBf,I,EAAoB;AAAA;;AAAA,iCACT,KAAKJ,cADI;AAAA,uDACnCK,MADmC;AAAA,UACnCA,MADmC,sCAC1B,KAD0B;AAAA,UACnBe,KADmB,wBACnBA,KADmB;AAE3C,UAAI3B,IAAI,GAAG,KAAKe,YAAL,CAAkBQ,WAAlB,CAA8B,KAAK/B,MAAnC,EAA2CoC,IAAI,CAACC,KAAL,CAAWlB,IAAX,CAA3C,CAAX;AACA,WAAKJ,cAAL,CAAoBI,IAApB,GAA2BA,IAA3B;AACAX,MAAAA,IAAI,CAAC8B,OAAL,CAAa,UAACC,CAAD,EAAY;AACvB,YAAI,CAACA,CAAC,CAACP,EAAP,EAAW;AACTO,UAAAA,CAAC,CAACC,UAAF,CAAaC,WAAb,GAA2B,CAA3B;AACD;AACF,OAJD;;AAKA,UAAIN,KAAK,IAAI,YAAWf,MAAX,CAAb,EAAiC;AAC/BZ,QAAAA,IAAI,GAAGA,IAAI,CAACkC,GAAL,CAAS,UAACC,IAAD,EAAe;AAC7B,cAAMX,EAAE,GAAGW,IAAI,CAACX,EAAhB;;AACA,cAAIA,EAAJ,EAAQ;AACN,gBAAMY,MAAM,GAAG,MAAI,CAACrB,YAAL,CAAkBU,SAAlB,CAA4BD,EAA5B,EAAgCE,QAAhC,CAAf;;AACA,gBAAMM,UAAU,GAAGI,MAAM,CAACF,GAAP,CAAW,UAACG,CAAD;AAAA,qBAAYA,CAAC,CAACL,UAAd;AAAA,aAAX,CAAnB;AACA,gBAAIM,OAAJ;;AACA,gBAAI,UAAS1B,MAAT,KAAoBe,KAAxB,EAA+B;AAC7B,kBAAMY,MAAM,GAAGzC,SAAS,CAACkC,UAAD,EAAaL,KAAb,CAAxB;AACAW,cAAAA,OAAO,GAAGzC,OAAO,CAACe,MAAD,CAAP,CAAgB2B,MAAhB,CAAV;AACD;;AACD,gBAAI,YAAW3B,MAAX,CAAJ,EAAwB;AACtB0B,cAAAA,OAAO,GAAG1B,MAAM,CAACoB,UAAD,CAAhB;AACD;;AACDG,YAAAA,IAAI,CAACH,UAAL,CAAgBQ,IAAhB,GAAuBF,OAAvB;AACD,WAZD,MAYO;AACLH,YAAAA,IAAI,CAACH,UAAL,CAAgBC,WAAhB,GAA8B,CAA9B;AACD;;AACD,iBAAOE,IAAP;AACD,SAlBM,CAAP;AAmBD;;AACD,WAAKnC,IAAL,GAAYN,SAAS,CAAC,SAAD,CAAT,CAAqB;AAC/BW,QAAAA,IAAI,EAAE,mBADyB;AAE/BoC,QAAAA,QAAQ,EAAEzC;AAFqB,OAArB,CAAZ;AAIA,WAAKoB,YAAL;AACD;;;mCACqBI,E,EAAqB;AAAA,8BACZ,KAAKpB,MADO,CACjCC,IADiC;AAAA,UACjCA,IADiC,kCAC1B,SAD0B;;AAEzC,UAAIA,IAAI,KAAK,SAAT,IAAsB,CAAC,KAAKT,OAAhC,EAAyC;AACvC,YAAM8C,OAAO,GACXlB,EAAE,GAAG,KAAKX,UAAL,CAAgB4B,QAAhB,CAAyBE,MAA9B,GACI,KAAK9B,UAAL,CAAgB4B,QAAhB,CAAyBjB,EAAzB,CADJ,GAEI,MAHN;;AAIA,YAAMoB,UAAU,GAAG,WAAUF,OAAV,CAAnB;;AACA,YAAI,KAAKpC,UAAL,CAAgBqC,MAAhB,KAA2B,CAA/B,EAAkC;AAChC,cAAMR,IAAI,GAAG,KAAKnC,IAAL,CAAU6C,SAAV,CAAoBC,IAApB,CAAyB,UAACC,QAAD,EAA8B;AAClE,mBAAOA,QAAQ,CAACC,GAAT,KAAiBxB,EAAxB;AACD,WAFY,CAAb;AAGAoB,UAAAA,UAAU,CAACZ,UAAX,GAAwBG,IAAxB;AACD;;AACD,eAAOS,UAAP;AACD,OAbD,MAaO;AACL,eAAOpB,EAAE,GAAG,KAAKxB,IAAL,CAAU6C,SAAV,CAAoBF,MAAzB,GAAkC,KAAK3C,IAAL,CAAU6C,SAAV,CAAoBrB,EAApB,CAAlC,GAA4D,MAAnE;AACD;AACF;;;iCAEmBG,K,EAAesB,K,EAAgC;AACjE,UAAMP,OAAO,GAAG,KAAK1C,IAAL,CAAU6C,SAAV,CAAoBC,IAApB,CAAyB,UAACC,QAAD,EAA8B;AACrE,eAAOA,QAAQ,CAACpB,KAAD,CAAR,KAAoBuB,IAA3B;AACD,OAFe,CAAhB;AAGA,aAAOR,OAAP,aAAOA,OAAP,uBAAOA,OAAO,CAAEM,GAAhB;AACD;;;8BAEgB;AACf,WAAKG,kBAAL;AACA,WAAKtC,UAAL,GAAkB,IAAlB;AACA,WAAKE,YAAL,GAAoB,IAApB;AAEA,WAAKf,IAAL,GAAY,IAAZ;AACD;;;4BAEeC,G,EAAkB;AAChC,UAAIA,GAAJ,EAAS;AACP,YAAIA,GAAG,CAACG,MAAR,EAAgB;AACd,eAAKA,MAAL,GAAcH,GAAG,CAACG,MAAlB;AACD;;AACD,YAAIH,GAAG,CAACK,UAAR,EAAoB;AAClB,eAAKA,UAAL,GAAkBL,GAAG,CAACK,UAAtB;AACD;;AACD,aAAKV,OAAL,GAAeK,GAAG,CAACL,OAAJ,IAAe,KAA9B;;AACA,YAAIK,GAAG,CAACM,cAAR,EAAwB;AACtB,eAAKX,OAAL,GAAe,IAAf;AACA,eAAKW,cAAL,mCACK,KAAKA,cADV,GAEKN,GAAG,CAACM,cAFT;AAID;AACF;AACF;;;mCAC4B;AAC3B,UAAMH,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMC,IAAY,GAAGD,MAAM,CAACC,IAAP,IAAe,SAApC;AACA,UAAM+C,YAAY,GAAG1D,SAAS,CAACW,IAAD,CAA9B;AACA,WAAKL,IAAL,GAAYoD,YAAY,CAAC,KAAKvC,UAAN,EAAkBT,MAAlB,CAAxB;AAEA,WAAKZ,MAAL,GAAcA,MAAM,CAAC,KAAKQ,IAAL,CAAU6C,SAAX,CAApB;AACD;;;mCAIsB;AAAA;;AACrB,UAAMQ,KAAK,GAAG,KAAK/C,UAAnB;AACA+C,MAAAA,KAAK,CAACvB,OAAN,CAAc,UAACwB,IAAD,EAAsB;AAAA,YAC1BjD,IAD0B,GACjBiD,IADiB,CAC1BjD,IAD0B;AAElC,YAAML,IAAI,GAAGL,YAAY,CAACU,IAAD,CAAZ,CAAmB,MAAI,CAACL,IAAxB,EAA8BsD,IAA9B,CAAb;AACAC,QAAAA,MAAM,CAACC,MAAP,CAAc,MAAI,CAACxD,IAAnB,EAAyBA,IAAzB;AACD,OAJD;AAKD;;;kCAEqB;AACpB,UAAI,CAAC,KAAKJ,OAAV,EAAmB;AACjB;AACD;;AAED,UAAMW,cAAc,GAAG,KAAKA,cAAL,IAAuB,EAA9C;AACA,WAAKQ,YAAL,GAAoBnB,OAAO,CAAC,KAAKI,IAAN,EAAYO,cAAZ,CAA3B;AACD;;;2BAEc;AACb,WAAKL,KAAL,CAAWC,IAAX,CAAgBsD,IAAhB,CAAqB,IAArB;AACD;;;;EAjLiChE,Y;;SAAfM,M","sourcesContent":["// @ts-ignore\nimport { SyncHook } from '@antv/async-hook';\nimport {\n  IClusterOptions,\n  IMapService,\n  IParseDataItem,\n  IParserCfg,\n  IParserData,\n  ISourceCFG,\n  ITransform,\n  lazyInject,\n  TYPES,\n} from '@antv/l7-core';\nimport { extent } from '@antv/l7-utils';\nimport {\n  BBox,\n  Feature,\n  FeatureCollection,\n  Geometries,\n  Properties,\n} from '@turf/helpers';\nimport { EventEmitter } from 'eventemitter3';\nimport { cloneDeep, isFunction, isString } from 'lodash';\n// @ts-ignore\n// tslint:disable-next-line:no-submodule-imports\nimport Supercluster from 'supercluster/dist/supercluster';\nimport { getParser, getTransform } from './';\nimport { cluster } from './transform/cluster';\nimport { statMap } from './utils/statistics';\nimport { getColumn } from './utils/util';\nexport default class Source extends EventEmitter {\n  public data: IParserData;\n\n  // 数据范围\n  public extent: BBox;\n  // 生命周期钩子\n  public hooks = {\n    init: new SyncHook(),\n  };\n  public parser: IParserCfg = { type: 'geojson' };\n  public transforms: ITransform[] = [];\n  public cluster: boolean = false;\n  public clusterOptions: Partial<IClusterOptions> = {\n    enable: false,\n    radius: 40,\n    maxZoom: 20,\n    zoom: -99,\n    method: 'count',\n  };\n\n  // 原始数据\n  private originData: any;\n  private rawData: any;\n\n  private clusterIndex: Supercluster;\n\n  constructor(data: any, cfg?: ISourceCFG) {\n    super();\n    // this.rawData = cloneDeep(data);\n    this.originData = data;\n    this.initCfg(cfg);\n\n    this.hooks.init.tap('parser', () => {\n      this.excuteParser();\n    });\n    this.hooks.init.tap('cluster', () => {\n      this.initCluster();\n    });\n    this.hooks.init.tap('transform', () => {\n      this.executeTrans();\n    });\n    this.init();\n  }\n\n  public setData(data: any, options?: ISourceCFG) {\n    this.rawData = data;\n    this.originData = data;\n    this.initCfg(options);\n    this.init();\n    this.emit('update');\n  }\n  public getClusters(zoom: number): any {\n    return this.clusterIndex.getClusters(this.extent, zoom);\n  }\n  public getClustersLeaves(id: number): any {\n    return this.clusterIndex.getLeaves(id, Infinity);\n  }\n  public updateClusterData(zoom: number): void {\n    const { method = 'sum', field } = this.clusterOptions;\n    let data = this.clusterIndex.getClusters(this.extent, Math.floor(zoom));\n    this.clusterOptions.zoom = zoom;\n    data.forEach((p: any) => {\n      if (!p.id) {\n        p.properties.point_count = 1;\n      }\n    });\n    if (field || isFunction(method)) {\n      data = data.map((item: any) => {\n        const id = item.id as number;\n        if (id) {\n          const points = this.clusterIndex.getLeaves(id, Infinity);\n          const properties = points.map((d: any) => d.properties);\n          let statNum;\n          if (isString(method) && field) {\n            const column = getColumn(properties, field);\n            statNum = statMap[method](column);\n          }\n          if (isFunction(method)) {\n            statNum = method(properties);\n          }\n          item.properties.stat = statNum;\n        } else {\n          item.properties.point_count = 1;\n        }\n        return item;\n      });\n    }\n    this.data = getParser('geojson')({\n      type: 'FeatureCollection',\n      features: data,\n    });\n    this.executeTrans();\n  }\n  public getFeatureById(id: number): unknown {\n    const { type = 'geojson' } = this.parser;\n    if (type === 'geojson' && !this.cluster) {\n      const feature =\n        id < this.originData.features.length\n          ? this.originData.features[id]\n          : 'null';\n      const newFeature = cloneDeep(feature);\n      if (this.transforms.length !== 0) {\n        const item = this.data.dataArray.find((dataItem: IParseDataItem) => {\n          return dataItem._id === id;\n        });\n        newFeature.properties = item;\n      }\n      return newFeature;\n    } else {\n      return id < this.data.dataArray.length ? this.data.dataArray[id] : 'null';\n    }\n  }\n\n  public getFeatureId(field: string, value: any): number | undefined {\n    const feature = this.data.dataArray.find((dataItem: IParseDataItem) => {\n      return dataItem[field] === name;\n    });\n    return feature?._id;\n  }\n\n  public destroy() {\n    this.removeAllListeners();\n    this.originData = null;\n    this.clusterIndex = null;\n    // @ts-ignore\n    this.data = null;\n  }\n\n  private initCfg(cfg?: ISourceCFG) {\n    if (cfg) {\n      if (cfg.parser) {\n        this.parser = cfg.parser;\n      }\n      if (cfg.transforms) {\n        this.transforms = cfg.transforms;\n      }\n      this.cluster = cfg.cluster || false;\n      if (cfg.clusterOptions) {\n        this.cluster = true;\n        this.clusterOptions = {\n          ...this.clusterOptions,\n          ...cfg.clusterOptions,\n        };\n      }\n    }\n  }\n  private excuteParser(): void {\n    const parser = this.parser;\n    const type: string = parser.type || 'geojson';\n    const sourceParser = getParser(type);\n    this.data = sourceParser(this.originData, parser);\n    // 计算范围\n    this.extent = extent(this.data.dataArray);\n  }\n  /**\n   * 数据统计\n   */\n  private executeTrans() {\n    const trans = this.transforms;\n    trans.forEach((tran: ITransform) => {\n      const { type } = tran;\n      const data = getTransform(type)(this.data, tran);\n      Object.assign(this.data, data);\n    });\n  }\n\n  private initCluster() {\n    if (!this.cluster) {\n      return;\n    }\n\n    const clusterOptions = this.clusterOptions || {};\n    this.clusterIndex = cluster(this.data, clusterOptions);\n  }\n\n  private init() {\n    this.hooks.init.call(this);\n  }\n}\n"],"file":"source.js"}