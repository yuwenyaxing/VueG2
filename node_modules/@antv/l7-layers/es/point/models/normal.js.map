{"version":3,"sources":["../../../src/point/models/normal.ts"],"names":["AttributeType","BlendType","gl","rgb2arr","BaseModel","PointTriangulation","feature","coordinates","vertices","indices","size","length","NormalModel","blend","layer","getLayerConfig","opacity","stroke","strokeWidth","u_opacity","u_stroke_width","u_stroke_color","buildModels","buildLayerModel","moduleName","vertexShader","normalVert","fragmentShader","normalFrag","triangulation","depth","enable","primitive","POINTS","getBlend","styleAttributeService","registerStyleAttribute","name","type","Attribute","descriptor","buffer","usage","DYNAMIC_DRAW","data","FLOAT","update","featureIdx","vertex","attributeIdx","Array","isArray","additive"],"mappings":";;;;;;;;;;;AAAA,SACEA,aADF,EAEEC,SAFF,EAGEC,EAHF,QAQO,eARP;AAUA,SAASC,OAAT,QAAwB,gBAAxB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;;;AASA,OAAO,SAASC,kBAAT,CAA4BC,OAA5B,EAAqD;AAC1D,MAAMC,WAAW,GAAGD,OAAO,CAACC,WAA5B;AACA,SAAO;AACLC,IAAAA,QAAQ,qBAAMD,WAAN,CADH;AAELE,IAAAA,OAAO,EAAE,CAAC,CAAD,CAFJ;AAGLC,IAAAA,IAAI,EAAEH,WAAW,CAACI;AAHb,GAAP;AAKD;;IAEoBC,W;;;;;;;;;;;;;sCACuD;AACxE,aAAO;AACLC,QAAAA,KAAK,EAAE;AADF,OAAP;AAGD;;;mCACoC;AAAA,iBAK/B,KAAKC,KAAL,CAAWC,cAAX,EAL+B;AAAA,8BAEjCC,OAFiC;AAAA,UAEjCA,OAFiC,6BAEvB,CAFuB;AAAA,6BAGjCC,MAHiC;AAAA,UAGjCA,MAHiC,4BAGxB,cAHwB;AAAA,kCAIjCC,WAJiC;AAAA,UAIjCA,WAJiC,iCAInB,CAJmB;;AAMnC,aAAO;AACLC,QAAAA,SAAS,EAAEH,OADN;AAELI,QAAAA,cAAc,EAAEF,WAFX;AAGLG,QAAAA,cAAc,EAAElB,OAAO,CAACc,MAAD;AAHlB,OAAP;AAKD;;;iCAE6B;AAC5B,aAAO,KAAKK,WAAL,EAAP;AACD;;;kCAE8B;AAC7B,aAAO,CACL,KAAKR,KAAL,CAAWS,eAAX,CAA2B;AACzBC,QAAAA,UAAU,EAAE,aADa;AAEzBC,QAAAA,YAAY,EAAEC,UAFW;AAGzBC,QAAAA,cAAc,EAAEC,UAHS;AAIzBC,QAAAA,aAAa,EAAExB,kBAJU;AAKzByB,QAAAA,KAAK,EAAE;AAAEC,UAAAA,MAAM,EAAE;AAAV,SALkB;AAMzBC,QAAAA,SAAS,EAAE9B,EAAE,CAAC+B,MANW;AAOzBpB,QAAAA,KAAK,EAAE,KAAKqB,QAAL;AAPkB,OAA3B,CADK,CAAP;AAWD;;;gDAEqC;AAEpC,WAAKC,qBAAL,CAA2BC,sBAA3B,CAAkD;AAChDC,QAAAA,IAAI,EAAE,MAD0C;AAEhDC,QAAAA,IAAI,EAAEtC,aAAa,CAACuC,SAF4B;AAGhDC,QAAAA,UAAU,EAAE;AACVH,UAAAA,IAAI,EAAE,QADI;AAEVI,UAAAA,MAAM,EAAE;AAENC,YAAAA,KAAK,EAAExC,EAAE,CAACyC,YAFJ;AAGNC,YAAAA,IAAI,EAAE,EAHA;AAINN,YAAAA,IAAI,EAAEpC,EAAE,CAAC2C;AAJH,WAFE;AAQVnC,UAAAA,IAAI,EAAE,CARI;AASVoC,UAAAA,MAAM,EAAE,gBACNxC,OADM,EAENyC,UAFM,EAGNC,MAHM,EAINC,YAJM,EAKH;AAAA,gCACkB3C,OADlB,CACKI,IADL;AAAA,gBACKA,IADL,8BACY,CADZ;AAEH,mBAAOwC,KAAK,CAACC,OAAN,CAAczC,IAAd,IAAsB,CAACA,IAAI,CAAC,CAAD,CAAL,CAAtB,GAAkC,CAACA,IAAD,CAAzC;AACD;AAjBS;AAHoC,OAAlD;AAuBD;;;0CAGC;AACA,aAAO;AACLG,QAAAA,KAAK,EAAEZ,SAAS,CAACmD;AADZ,OAAP;AAGD;;;;EArEsChD,S;;SAApBQ,W","sourcesContent":["import {\n  AttributeType,\n  BlendType,\n  gl,\n  IEncodeFeature,\n  ILayerConfig,\n  IModel,\n  IModelUniform,\n} from '@antv/l7-core';\n\nimport { rgb2arr } from '@antv/l7-utils';\nimport BaseModel from '../../core/BaseModel';\nimport { BlendTypes } from '../../utils/blend';\nimport normalFrag from '../shaders/normal_frag.glsl';\nimport normalVert from '../shaders/normal_vert.glsl';\ninterface IPointLayerStyleOptions {\n  opacity: number;\n  strokeWidth: number;\n  stroke: string;\n}\nexport function PointTriangulation(feature: IEncodeFeature) {\n  const coordinates = feature.coordinates as number[];\n  return {\n    vertices: [...coordinates],\n    indices: [0],\n    size: coordinates.length,\n  };\n}\n\nexport default class NormalModel extends BaseModel {\n  public getDefaultStyle(): Partial<IPointLayerStyleOptions & ILayerConfig> {\n    return {\n      blend: 'additive',\n    };\n  }\n  public getUninforms(): IModelUniform {\n    const {\n      opacity = 1,\n      stroke = 'rgb(0,0,0,0)',\n      strokeWidth = 1,\n    } = this.layer.getLayerConfig() as IPointLayerStyleOptions;\n    return {\n      u_opacity: opacity,\n      u_stroke_width: strokeWidth,\n      u_stroke_color: rgb2arr(stroke),\n    };\n  }\n\n  public initModels(): IModel[] {\n    return this.buildModels();\n  }\n\n  public buildModels(): IModel[] {\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'normalpoint',\n        vertexShader: normalVert,\n        fragmentShader: normalFrag,\n        triangulation: PointTriangulation,\n        depth: { enable: false },\n        primitive: gl.POINTS,\n        blend: this.getBlend(),\n      }),\n    ];\n  }\n\n  protected registerBuiltinAttributes() {\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'size',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Size',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { size = 1 } = feature;\n          return Array.isArray(size) ? [size[0]] : [size as number];\n        },\n      },\n    });\n  }\n  private defaultStyleOptions(): Partial<\n    IPointLayerStyleOptions & ILayerConfig\n  > {\n    return {\n      blend: BlendType.additive,\n    };\n  }\n}\n"],"file":"normal.js"}