{"version":3,"sources":["../../../src/point/models/image.ts"],"names":["AttributeType","gl","BaseModel","PointImageTriangulation","ImageModel","texture","updateTexture","createTexture2D","rendererService","update","data","iconService","getCanvas","layer","render","mag","LINEAR","min","width","height","canvasHeight","getLayerConfig","opacity","getDirty","bind","u_opacity","u_texture","u_textSize","registerBuiltinAttributes","on","buildModels","destroy","off","buildLayerModel","moduleName","vertexShader","pointImageVert","fragmentShader","pointImageFrag","triangulation","primitive","POINTS","depth","enable","blend","getBlend","styleAttributeService","registerStyleAttribute","name","type","Attribute","descriptor","buffer","usage","DYNAMIC_DRAW","FLOAT","size","feature","featureIdx","vertex","attributeIdx","Array","isArray","iconMap","getIconMap","shape","x","y"],"mappings":"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","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IEncodeFeature,\n  IModel,\n  IModelUniform,\n  ITexture2D,\n} from '@antv/l7-core';\n\nimport BaseModel from '../../core/BaseModel';\nimport { PointImageTriangulation } from '../../core/triangulation';\nimport pointImageFrag from '../shaders/image_frag.glsl';\nimport pointImageVert from '../shaders/image_vert.glsl';\ninterface IImageLayerStyleOptions {\n  opacity: number;\n}\n\nexport default class ImageModel extends BaseModel {\n  private texture: ITexture2D;\n\n  public getUninforms(): IModelUniform {\n    const { opacity } = this.layer.getLayerConfig() as IImageLayerStyleOptions;\n    if (this.rendererService.getDirty()) {\n      this.texture.bind();\n    }\n    return {\n      u_opacity: opacity || 1.0,\n      u_texture: this.texture,\n      u_textSize: [1024, this.iconService.canvasHeight || 128],\n    };\n  }\n\n  public initModels(): IModel[] {\n    this.registerBuiltinAttributes();\n    this.updateTexture();\n    this.iconService.on('imageUpdate', this.updateTexture);\n    return this.buildModels();\n  }\n\n  public clearModels() {\n    if (this.texture) {\n      this.texture.destroy();\n    }\n    this.iconService.off('imageUpdate', this.updateTexture);\n  }\n\n  public buildModels(): IModel[] {\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'pointImage',\n        vertexShader: pointImageVert,\n        fragmentShader: pointImageFrag,\n        triangulation: PointImageTriangulation,\n        primitive: gl.POINTS,\n        depth: { enable: false },\n        blend: this.getBlend(),\n      }),\n    ];\n  }\n  protected registerBuiltinAttributes() {\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'size',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Size',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { size = 5 } = feature;\n          return Array.isArray(size) ? [size[0]] : [size as number];\n        },\n      },\n    });\n\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'uv',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Uv',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 2,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const iconMap = this.iconService.getIconMap();\n\n          const { shape } = feature;\n          const { x, y } = iconMap[shape as string] || { x: 0, y: 0 };\n          return [x, y];\n        },\n      },\n    });\n  }\n\n  private updateTexture = () => {\n    const { createTexture2D } = this.rendererService;\n    if (this.texture) {\n      this.texture.update({\n        data: this.iconService.getCanvas(),\n      });\n      this.layer.render();\n      return;\n    }\n    this.texture = createTexture2D({\n      data: this.iconService.getCanvas(),\n      mag: gl.LINEAR,\n      min: gl.LINEAR,\n      width: 1024,\n      height: this.iconService.canvasHeight || 128,\n    });\n  };\n}\n"],"file":"image.js"}