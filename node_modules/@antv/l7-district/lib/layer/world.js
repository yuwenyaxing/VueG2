"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _l = require("@antv/l7");

var _ = require("../");

var _baseLayer = _interopRequireDefault(require("./baseLayer"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var WorldLayer = function (_BaseLayer) {
  (0, _inherits2.default)(WorldLayer, _BaseLayer);

  var _super = _createSuper(WorldLayer);

  function WorldLayer(scene) {
    var _this;

    var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _classCallCheck2.default)(this, WorldLayer);
    _this = _super.call(this, scene, option);

    _this.loadData().then(function (_ref) {
      var _this$options$label;

      var _ref2 = (0, _slicedToArray2.default)(_ref, 3),
          fillData = _ref2[0],
          lineData = _ref2[1],
          fillLabel = _ref2[2];

      _this.addFillLayer(fillData);

      if (_this.options.showBorder) {
        _this.addFillLine(lineData);
      }

      if ((_this$options$label = _this.options.label) === null || _this$options$label === void 0 ? void 0 : _this$options$label.enable) {
        _this.addLabelLayer(fillLabel, 'json');
      }
    });

    return _this;
  }

  (0, _createClass2.default)(WorldLayer, [{
    key: "addFillLine",
    value: function addFillLine(data) {
      var bord1 = data.features.filter(function (feature) {
        return feature.properties.type === '10' || feature.properties.type === '1' || feature.properties.type === '11' || feature.properties.type === '8';
      });
      var bordFc = {
        type: 'FeatureCollection',
        features: bord1
      };
      var nationalBorder = data.features.filter(function (feature) {
        return feature.properties.type !== '10' && feature.properties.type !== '1' && feature.properties.type !== '11' && feature.properties.type !== '8';
      });
      var nationalFc = {
        type: 'FeatureCollection',
        features: nationalBorder
      };
      this.addNationBorder(nationalFc, bordFc);
    }
  }, {
    key: "loadData",
    value: function () {
      var _loadData = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee() {
        var countryConfig, fillData, lineData, fillLabel;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                countryConfig = (0, _.getDataConfig)(this.options.geoDataLevel).world;
                _context.next = 3;
                return this.fetchData(countryConfig.fill);

              case 3:
                fillData = _context.sent;
                _context.next = 6;
                return this.fetchData(countryConfig.line);

              case 6:
                lineData = _context.sent;
                fillLabel = fillData.features.map(function (feature) {
                  return _objectSpread(_objectSpread({}, feature.properties), {}, {
                    center: [feature.properties.x, feature.properties.y]
                  });
                });
                return _context.abrupt("return", [fillData, lineData, fillLabel]);

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function loadData() {
        return _loadData.apply(this, arguments);
      }

      return loadData;
    }()
  }, {
    key: "addNationBorder",
    value: function addNationBorder(boundaries, boundaries2) {
      var _this$options = this.options,
          nationalStroke = _this$options.nationalStroke,
          nationalWidth = _this$options.nationalWidth,
          coastlineStroke = _this$options.coastlineStroke,
          chinaNationalStroke = _this$options.chinaNationalStroke,
          chinaNationalWidth = _this$options.chinaNationalWidth,
          coastlineWidth = _this$options.coastlineWidth,
          visible = _this$options.visible,
          zIndex = _this$options.zIndex;
      var lineLayer = new _l.LineLayer({
        zIndex: zIndex + 0.1,
        visible: visible
      }).source(boundaries).size('type', function (v) {
        if (v === '0') {
          return chinaNationalWidth;
        } else if (v === '2' || v === '9') {
          return coastlineWidth;
        } else if (v === '7') {
          return nationalWidth;
        } else {
          return nationalWidth;
        }
      }).color('type', function (v) {
        if (v === '0') {
          return chinaNationalStroke;
        } else if (v === '2' || v === '9') {
          return coastlineStroke;
        } else if (v === '7') {
          return nationalStroke;
        } else {
          return nationalStroke;
        }
      });
      var lineLayer2 = new _l.LineLayer({
        zIndex: zIndex + 0.1,
        visible: visible
      }).source(boundaries2).size('type', function (v) {
        if (v === '1') {
          return chinaNationalWidth;
        } else {
          return nationalWidth;
        }
      }).shape('line').color('type', function (v) {
        if (v === '1') {
          return chinaNationalStroke;
        } else {
          return nationalStroke;
        }
      }).style({
        lineType: 'dash',
        dashArray: [2, 2]
      });
      this.scene.addLayer(lineLayer);
      this.scene.addLayer(lineLayer2);
      this.layers.push(lineLayer, lineLayer2);
    }
  }]);
  return WorldLayer;
}(_baseLayer.default);

exports.default = WorldLayer;
//# sourceMappingURL=world.js.map