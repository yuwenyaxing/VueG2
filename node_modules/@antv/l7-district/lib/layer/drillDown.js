"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _mergeWith = _interopRequireDefault(require("lodash/mergeWith"));

var _city = _interopRequireDefault(require("./city"));

var _country = _interopRequireDefault(require("./country"));

var _province = _interopRequireDefault(require("./province"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function mergeCustomizer(objValue, srcValue) {
  if (Array.isArray(srcValue)) {
    return srcValue;
  }
}

var DrillDownLayer = function () {
  function DrillDownLayer(scene, option) {
    var _this = this;

    (0, _classCallCheck2.default)(this, DrillDownLayer);
    this.options = void 0;
    this.cityLayer = void 0;
    this.countyLayer = void 0;
    this.provinceLayer = void 0;
    this.scene = void 0;
    this.drillState = 0;
    this.layers = [];
    this.options = (0, _mergeWith.default)(this.getDefaultOption(), option, mergeCustomizer);
    this.scene = scene;
    this.provinceLayer = new _country.default(scene, this.getLayerOption('province'));
    this.cityLayer = new _province.default(scene, this.getLayerOption('city'));
    this.countyLayer = new _city.default(scene, this.getLayerOption('county'));
    this.scene.setMapStatus({
      doubleClickZoom: false
    });

    if (!this.options.customTrigger) {
      this.provinceLayer.on('loaded', function () {
        _this.addCountryEvent();

        _this.layers.push(_this.provinceLayer);
      });
      this.cityLayer.on('loaded', function () {
        _this.addProvinceEvent();

        _this.layers.push(_this.cityLayer);
      });
      this.countyLayer.on('loaded', function () {
        _this.addCityEvent();

        _this.layers.push(_this.cityLayer);
      });
    }
  }

  (0, _createClass2.default)(DrillDownLayer, [{
    key: "getDefaultOption",
    value: function getDefaultOption() {
      return {
        drillDepth: 2,
        customTrigger: false,
        drillDownTriggerEvent: 'click',
        drillUpTriggerEvent: 'undblclick',
        provinceData: [],
        cityData: [],
        countyData: [],
        city: {
          adcode: []
        },
        county: {
          adcode: []
        }
      };
    }
  }, {
    key: "addCountryEvent",
    value: function addCountryEvent() {
      var _this2 = this;

      var drillDownTriggerEvent = this.options.drillDownTriggerEvent;
      this.provinceLayer.fillLayer.on(drillDownTriggerEvent, function (e) {
        _this2.provinceLayer.hide();

        _this2.drillDown(e.feature.properties.adcode);
      });
    }
  }, {
    key: "addProvinceEvent",
    value: function addProvinceEvent() {
      var _this3 = this;

      var _this$options = this.options,
          drillDownTriggerEvent = _this$options.drillDownTriggerEvent,
          drillUpTriggerEvent = _this$options.drillUpTriggerEvent;
      this.cityLayer.fillLayer.on(drillUpTriggerEvent, function () {
        _this3.drillUp();
      });
      this.cityLayer.fillLayer.on(drillDownTriggerEvent, function (e) {
        _this3.drillDown(e.feature.properties.adcode);
      });
    }
  }, {
    key: "addCityEvent",
    value: function addCityEvent() {
      var _this4 = this;

      var _this$options2 = this.options,
          drillDownTriggerEvent = _this$options2.drillDownTriggerEvent,
          drillUpTriggerEvent = _this$options2.drillUpTriggerEvent;
      this.countyLayer.fillLayer.on(drillUpTriggerEvent, function () {
        _this4.drillUp();
      });
    }
  }, {
    key: "show",
    value: function show() {
      this.layers.forEach(function (layer) {
        return layer.show();
      });
    }
  }, {
    key: "hide",
    value: function hide() {
      this.layers.forEach(function (layer) {
        return layer.hide();
      });
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.layers.forEach(function (layer) {
        return layer.destroy();
      });
    }
  }, {
    key: "showProvinceView",
    value: function showProvinceView(adcode, newData, joinByField) {
      this.cityLayer.show();
      this.cityLayer.updateDistrict(adcode, newData, joinByField);
      this.cityLayer.fillLayer.fitBounds();
      this.countyLayer.hide();
      this.drillState = 1;
    }
  }, {
    key: "showCityView",
    value: function showCityView(code, newData, joinByField) {
      this.countyLayer.show();
      var adcode = "".concat(code);

      if (adcode.substr(2, 2) === '00') {
        adcode = adcode.substr(0, 2) + '0100';
      }

      this.countyLayer.updateDistrict(adcode, newData, joinByField);
      this.countyLayer.fillLayer.fitBounds();
      this.cityLayer.hide();
      this.drillState = 2;
    }
  }, {
    key: "drillUp",
    value: function drillUp() {
      switch (this.drillState) {
        case 2:
          this.cityLayer.show();
          this.cityLayer.fillLayer.fitBounds();
          this.countyLayer.hide();
          this.drillState = 1;
          break;

        case 1:
          this.provinceLayer.show();
          this.provinceLayer.fillLayer.fitBounds();
          this.cityLayer.hide();
          this.drillState = 0;
          break;
      }
    }
  }, {
    key: "drillDown",
    value: function drillDown(adcode, newData, joinByField) {
      var drillDepth = this.options.drillDepth;

      if (this.drillState === drillDepth) {
        return;
      }

      switch (this.drillState) {
        case 0:
          this.showProvinceView(adcode, newData, joinByField);
          break;

        case 1:
          this.showCityView(adcode, newData, joinByField);
          break;
      }
    }
  }, {
    key: "updateData",
    value: function updateData(layer, newData, joinByField) {
      switch (layer) {
        case 'province':
          this.provinceLayer.updateData(newData, joinByField);
          break;

        case 'city':
          this.cityLayer.updateData(newData, joinByField);
          break;

        case 'county':
          this.countyLayer.updateData(newData, joinByField);
      }
    }
  }, {
    key: "getLayerOption",
    value: function getLayerOption(type) {
      var _this$options3 = this.options,
          joinBy = _this$options3.joinBy,
          label = _this$options3.label,
          bubble = _this$options3.bubble,
          fill = _this$options3.fill,
          popup = _this$options3.popup,
          geoDataLevel = _this$options3.geoDataLevel;
      var datatype = type + 'Data';
      return _objectSpread({
        data: this.options[datatype],
        joinBy: joinBy,
        label: label,
        bubble: bubble,
        fill: fill,
        popup: popup,
        geoDataLevel: geoDataLevel
      }, this.options[type]);
    }
  }]);
  return DrillDownLayer;
}();

exports.default = DrillDownLayer;
//# sourceMappingURL=drillDown.js.map