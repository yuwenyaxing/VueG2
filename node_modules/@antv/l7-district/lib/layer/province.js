"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _merge = _interopRequireDefault(require("lodash/merge"));

var _ = require("../");

var _baseLayer = _interopRequireDefault(require("./baseLayer"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var ProvinceLayer = function (_BaseLayer) {
  (0, _inherits2.default)(ProvinceLayer, _BaseLayer);

  var _super = _createSuper(ProvinceLayer);

  function ProvinceLayer(scene) {
    var _this;

    var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _classCallCheck2.default)(this, ProvinceLayer);
    _this = _super.call(this, scene, option);
    _this.fillRawData = void 0;
    _this.lineRawData = void 0;
    _this.labelRawData = void 0;

    _this.addProvinceFillLayer();

    return _this;
  }

  (0, _createClass2.default)(ProvinceLayer, [{
    key: "updateDistrict",
    value: function updateDistrict(adcode, newData, joinByField) {
      var _this$options$bubble;

      if (!adcode && Array.isArray(adcode) && adcode.length === 0) {
        this.hide();
        return;
      }

      var _this$options = this.options,
          label = _this$options.label,
          showBorder = _this$options.showBorder;
      this.setOption({
        adcode: adcode
      });
      var fillData = this.filterData(this.fillRawData, adcode);
      var lineData = this.filterData(this.lineRawData, adcode);
      var labelData = this.filterLabelData(this.labelRawData, adcode);

      if (this.options.bubble && ((_this$options$bubble = this.options.bubble) === null || _this$options$bubble === void 0 ? void 0 : _this$options$bubble.enable) !== false) {
        var bubbleData = fillData.features.map(function (feature) {
          return _objectSpread(_objectSpread({}, feature.properties), {}, {
            center: [feature.properties.x, feature.properties.y]
          });
        });
        this.bubbleLayer.setData(bubbleData);
      }

      this.fillData = fillData;
      this.updateData(newData, joinByField);

      if (showBorder) {
        this.lineLayer.setData(lineData);
      }

      if (label.enable) {
        this.labelLayer.setData(labelData);
      }

      this.show();
    }
  }, {
    key: "getDefaultOption",
    value: function getDefaultOption() {
      var config = (0, _get2.default)((0, _getPrototypeOf2.default)(ProvinceLayer.prototype), "getDefaultOption", this).call(this);
      return (0, _merge.default)({}, config, {
        adcode: ['110000'],
        depth: 2,
        label: {
          field: 'NAME_CHN',
          textAllowOverlap: false
        },
        popup: {
          enable: true,
          Html: function Html(props) {
            return "<span>".concat(props.NAME_CHN, "</span>");
          }
        }
      });
    }
  }, {
    key: "filterData",
    value: function filterData(data, adcode) {
      var adcodeArray = Array.isArray(adcode) ? adcode : [adcode];
      var features = data.features.filter(function (fe) {
        var code = fe.properties.adcode_pro;
        return adcodeArray.indexOf(code) !== -1 || adcodeArray.indexOf('' + code) !== -1;
      });
      return {
        type: 'FeatureCollection',
        features: features
      };
    }
  }, {
    key: "filterLabelData",
    value: function filterLabelData(data, adcode) {
      var adcodeArray = Array.isArray(adcode) ? adcode : [adcode];
      var features = data.filter(function (fe) {
        var code = fe.adcode_pro;
        return adcodeArray.indexOf(code) !== -1 || adcodeArray.indexOf('' + code) !== -1;
      });
      return features;
    }
  }, {
    key: "addProvinceFillLayer",
    value: function () {
      var _addProvinceFillLayer = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee() {
        var _ref, depth, adcode, label, showBorder, countryConfig, fillData, data, labelData;

        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _ref = this.options, depth = _ref.depth, adcode = _ref.adcode, label = _ref.label, showBorder = _ref.showBorder;
                countryConfig = (0, _.getDataConfig)(this.options.geoDataLevel).country.CHN[depth];
                _context.next = 4;
                return this.fetchData(countryConfig.fill);

              case 4:
                fillData = _context.sent;
                this.labelRawData = fillData.features.map(function (feature) {
                  return _objectSpread(_objectSpread({}, feature.properties), {}, {
                    center: [feature.properties.x, feature.properties.y]
                  });
                });
                data = this.filterData(fillData, adcode);
                this.fillData = data;
                labelData = this.filterLabelData(this.labelRawData, adcode);
                this.fillRawData = fillData;
                this.addFillLayer(data);

                if (label.enable) {
                  this.addLabelLayer(labelData);
                }

                this.lineRawData = fillData;

                if (showBorder) {
                  this.addFillLine(data);
                }

              case 14:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function addProvinceFillLayer() {
        return _addProvinceFillLayer.apply(this, arguments);
      }

      return addProvinceFillLayer;
    }()
  }, {
    key: "addProvinceLineLayer",
    value: function () {
      var _addProvinceLineLayer = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2() {
        var _ref2, depth, adcode, countryConfig, fillData, data;

        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _ref2 = this.options, depth = _ref2.depth, adcode = _ref2.adcode;
                countryConfig = (0, _.getDataConfig)(this.options.geoDataLevel).country.CHN[depth];
                _context2.next = 4;
                return this.fetchData(countryConfig.line);

              case 4:
                fillData = _context2.sent;
                data = this.filterData(fillData, adcode);
                this.lineRawData = fillData;
                this.addFillLine(data);

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function addProvinceLineLayer() {
        return _addProvinceLineLayer.apply(this, arguments);
      }

      return addProvinceLineLayer;
    }()
  }]);
  return ProvinceLayer;
}(_baseLayer.default);

exports.default = ProvinceLayer;
//# sourceMappingURL=province.js.map