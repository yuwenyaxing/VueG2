{"version":3,"sources":["../../src/layer/country.ts"],"names":["CountryLayer","scene","option","options","depth","showBorder","addProvinceFill","addProvinceLabel","countryConfig","geoDataLevel","country","CHN","addProvinceLine","provinceLine","addCityBorder","fill","addCountyBorder","fetchData","fillData","addFillLayer","label","fillLabel","enable","addLabelLayer","filter","v","name","addMCLabel","cfg","lineData","border1","features","feature","type","properties","border2","borderFc","borderFc2","nationalBorder","nationalFc","addNationBorder","boundaries","boundaries2","boundaries3","nationalStroke","provinceStroke","provinceStrokeWidth","nationalWidth","chinaNationalStroke","chinaNationalWidth","coastlineStroke","coastlineWidth","stroke","strokeWidth","visible","zIndex","lineLayer","LineLayer","source","size","shape","color","lineLayer2","style","lineType","dashArray","lineLayer3","addLayer","layers","push","cityStroke","cityStrokeWidth","cityline","opacity","countyStrokeWidth","countyStroke","data","center","labelLayer1","addText","maxZoom","labelLayer2","minZoom","labelLayer","labelData","offset","PointLayer","parser","coordinates","textAllowOverlap","textOffset","BaseLayer"],"mappings":"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","sourcesContent":["import { AttributeType, LineLayer, PointLayer, Scene } from '@antv/l7';\nimport { getDataConfig } from '../index';\nimport BaseLayer from './baseLayer';\nimport { IDistrictLayerOption } from './interface';\n\nexport default class CountryLayer extends BaseLayer {\n  constructor(scene: Scene, option: Partial<IDistrictLayerOption> = {}) {\n    super(scene, option);\n    const { depth, showBorder } = this.options;\n    this.addProvinceFill();\n    this.addProvinceLabel();\n    const countryConfig = getDataConfig(this.options.geoDataLevel).country.CHN[\n      depth\n    ];\n    if (showBorder) {\n      this.addProvinceLine(countryConfig.provinceLine);\n      if (depth === 2 * 1) {\n        this.addCityBorder(countryConfig.fill);\n      }\n      if (depth === 3 * 1) {\n        this.addCountyBorder(countryConfig.fill);\n      }\n    }\n  }\n  protected async addProvinceFill() {\n    const { depth } = this.options;\n    const countryConfig = getDataConfig(this.options.geoDataLevel).country.CHN[\n      depth\n    ];\n    const fillData = await this.fetchData(countryConfig.fill);\n    this.addFillLayer(fillData);\n  }\n  protected async addProvinceLabel() {\n    const { depth } = this.options;\n    const countryConfig = getDataConfig(this.options.geoDataLevel).country.CHN[\n      depth\n    ];\n    const fillLabel = countryConfig.label\n      ? await this.fetchData(countryConfig.label)\n      : null;\n    if (fillLabel && this.options.label?.enable) {\n      this.addLabelLayer(\n        fillLabel.filter((v: any) => {\n          return v.name !== '澳门';\n        }),\n      );\n      this.addMCLabel();\n    }\n  }\n  // 国界,省界\n  protected async addProvinceLine(cfg: any) {\n    const lineData = await this.fetchData(cfg);\n    const border1 = lineData.features.filter((feature: any) => {\n      const type = feature.properties.type;\n      return type === '1';\n    });\n    // 香港 澳门\n    const border2 = lineData.features.filter((feature: any) => {\n      const type = feature.properties.type;\n      return type === '4';\n    });\n    const borderFc = {\n      type: 'FeatureCollection',\n      features: border1,\n    };\n\n    const borderFc2 = {\n      type: 'FeatureCollection',\n      features: border2,\n    };\n\n    const nationalBorder = lineData.features.filter((feature: any) => {\n      const type = feature.properties.type;\n      return type !== '1' && type !== '4';\n    });\n    const nationalFc = {\n      type: 'FeatureCollection',\n      features: nationalBorder,\n    };\n    this.addNationBorder(nationalFc, borderFc, borderFc2);\n  }\n\n  // 国界,省界\n  // protected addFillLine(lineData: any) {\n  //   const border1 = lineData.features.filter((feature: any) => {\n  //     const type = feature.properties.type;\n  //     return type === '1' || type === '4';\n  //   });\n  //   const borderFc = {\n  //     type: 'FeatureCollection',\n  //     features: border1,\n  //   };\n  //   const nationalBorder = lineData.features.filter((feature: any) => {\n  //     const type = feature.properties.type;\n  //     return type !== '1' && type !== '4';\n  //   });\n  //   const nationalFc = {\n  //     type: 'FeatureCollection',\n  //     features: nationalBorder,\n  //   };\n  //   this.addNationBorder(nationalFc, borderFc);\n  // }\n\n  private async loadData() {\n    const { depth } = this.options;\n    const countryConfig = getDataConfig(this.options.geoDataLevel).country.CHN[\n      depth\n    ];\n    const fillData = await this.fetchData(countryConfig.fill);\n    const fillLabel = countryConfig.label\n      ? await this.fetchData(countryConfig.label)\n      : null;\n    return [fillData, fillLabel];\n  }\n  // 省级行政区划\n  private async addNationBorder(\n    boundaries: any,\n    boundaries2: any,\n    boundaries3: any,\n  ) {\n    const {\n      nationalStroke,\n      provinceStroke,\n      provinceStrokeWidth,\n      nationalWidth,\n      chinaNationalStroke,\n      chinaNationalWidth,\n      coastlineStroke,\n      coastlineWidth,\n      showBorder,\n      stroke,\n      strokeWidth,\n      visible,\n      zIndex,\n    } = this.options;\n    // 添加国界线\n    const lineLayer = new LineLayer({\n      zIndex: zIndex + 0.1,\n      visible: visible && showBorder,\n    })\n      .source(boundaries)\n      .size('type', (v: string) => {\n        if (v === '3') {\n          return provinceStrokeWidth;\n        } else if (v === '2') {\n          return coastlineWidth;\n        } else if (v === '0') {\n          return chinaNationalWidth;\n        } else {\n          return '#fff';\n        }\n      })\n      .shape('line')\n      .color('type', (v: string) => {\n        if (v === '3') {\n          return provinceStroke; // 省界\n        } else if (v === '2') {\n          return coastlineStroke; // 海岸线\n        } else if (v === '0') {\n          return chinaNationalStroke; // 中国国界线\n        } else {\n          return '#fff';\n        }\n      });\n    // 添加未定国界\n    const lineLayer2 = new LineLayer({\n      zIndex: zIndex + 0.1,\n      visible: visible && showBorder,\n    })\n      .source(boundaries2)\n      .size(chinaNationalWidth)\n      .shape('line')\n      .color(chinaNationalStroke)\n      .style({\n        lineType: 'dash',\n        dashArray: [2, 2],\n      });\n\n    // 添加澳门香港界限\n    const lineLayer3 = new LineLayer({\n      zIndex: zIndex + 0.1,\n      visible: visible && showBorder,\n    })\n      .source(boundaries3)\n      .size(provinceStrokeWidth)\n      .shape('line')\n      .color(provinceStroke)\n      .style({\n        lineType: 'dash',\n        dashArray: [4, 2, 2, 2],\n      });\n\n    this.scene.addLayer(lineLayer);\n    this.scene.addLayer(lineLayer2);\n    this.scene.addLayer(lineLayer3);\n    this.layers.push(lineLayer, lineLayer2, lineLayer3);\n  }\n  // 市边界\n  private async addCityBorder(cfg: any) {\n    const border1 = await this.fetchData(cfg);\n    const { cityStroke, cityStrokeWidth, visible } = this.options;\n    const cityline = new LineLayer({\n      zIndex: 2,\n      visible,\n    })\n      .source(border1)\n      .color(cityStroke)\n      .size(cityStrokeWidth)\n      .style({\n        opacity: 0.5,\n      });\n    this.scene.addLayer(cityline);\n    this.layers.push(cityline);\n  }\n\n  // 县级边界\n  private async addCountyBorder(cfg: any) {\n    const border1 = await this.fetchData(cfg);\n    const { countyStrokeWidth, countyStroke, visible } = this.options;\n    const cityline = new LineLayer({\n      zIndex: 2,\n      visible,\n    })\n      .source(border1)\n      .color(countyStroke)\n      .size(countyStrokeWidth)\n      .style({\n        opacity: 0.5,\n      });\n    this.scene.addLayer(cityline);\n    this.layers.push(cityline);\n  }\n\n  private addMCLabel() {\n    const data = [\n      {\n        name: '澳门',\n        center: [113.537747, 22.187009],\n      },\n    ];\n    const labelLayer1 = this.addText(data, { maxZoom: 2.9 }, [-45, -10]);\n    const labelLayer2 = this.addText(data, { minZoom: 3, maxZoom: 4 }, [\n      -35,\n      -10,\n    ]);\n    const labelLayer = this.addText(data, { minZoom: 4.1 }, [0, 0]);\n    this.scene.addLayer(labelLayer);\n    this.scene.addLayer(labelLayer1);\n    this.scene.addLayer(labelLayer2);\n    this.layers.push(labelLayer, labelLayer1, labelLayer2);\n  }\n\n  private addText(labelData: any, option: any, offset: [number, number]) {\n    const { label, zIndex, visible } = this.options;\n    const labelLayer = new PointLayer({\n      zIndex: zIndex + 0.4,\n      visible,\n      ...option,\n    })\n      .source(labelData, {\n        parser: {\n          type: 'json',\n          coordinates: 'center',\n        },\n      })\n      .color(label.color as AttributeType)\n      .shape('name', 'text')\n      .size(label.size as AttributeType)\n      .style({\n        opacity: label.opacity,\n        stroke: label.stroke,\n        strokeWidth: label.strokeWidth,\n        textAllowOverlap: label.textAllowOverlap,\n        textOffset: offset,\n      });\n    return labelLayer;\n  }\n}\n"],"file":"country.js"}