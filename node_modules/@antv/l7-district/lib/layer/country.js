"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _l = require("@antv/l7");

var _index = require("../index");

var _baseLayer = _interopRequireDefault(require("./baseLayer"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var CountryLayer = function (_BaseLayer) {
  (0, _inherits2.default)(CountryLayer, _BaseLayer);

  var _super = _createSuper(CountryLayer);

  function CountryLayer(scene) {
    var _this;

    var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _classCallCheck2.default)(this, CountryLayer);
    _this = _super.call(this, scene, option);
    var _this$options = _this.options,
        depth = _this$options.depth,
        showBorder = _this$options.showBorder;

    _this.addProvinceFill();

    _this.addProvinceLabel();

    var countryConfig = (0, _index.getDataConfig)(_this.options.geoDataLevel).country.CHN[depth];

    if (showBorder) {
      _this.addProvinceLine(countryConfig.provinceLine);

      if (depth === 2 * 1) {
        _this.addCityBorder(countryConfig.fill);
      }

      if (depth === 3 * 1) {
        _this.addCountyBorder(countryConfig.fill);
      }
    }

    return _this;
  }

  (0, _createClass2.default)(CountryLayer, [{
    key: "addProvinceFill",
    value: function () {
      var _addProvinceFill = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee() {
        var depth, countryConfig, fillData;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                depth = this.options.depth;
                countryConfig = (0, _index.getDataConfig)(this.options.geoDataLevel).country.CHN[depth];
                _context.next = 4;
                return this.fetchData(countryConfig.fill);

              case 4:
                fillData = _context.sent;
                this.addFillLayer(fillData);

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function addProvinceFill() {
        return _addProvinceFill.apply(this, arguments);
      }

      return addProvinceFill;
    }()
  }, {
    key: "addProvinceLabel",
    value: function () {
      var _addProvinceLabel = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2() {
        var _this$options$label;

        var depth, countryConfig, fillLabel;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                depth = this.options.depth;
                countryConfig = (0, _index.getDataConfig)(this.options.geoDataLevel).country.CHN[depth];

                if (!countryConfig.label) {
                  _context2.next = 8;
                  break;
                }

                _context2.next = 5;
                return this.fetchData(countryConfig.label);

              case 5:
                _context2.t0 = _context2.sent;
                _context2.next = 9;
                break;

              case 8:
                _context2.t0 = null;

              case 9:
                fillLabel = _context2.t0;

                if (fillLabel && ((_this$options$label = this.options.label) === null || _this$options$label === void 0 ? void 0 : _this$options$label.enable)) {
                  this.addLabelLayer(fillLabel.filter(function (v) {
                    return v.name !== '澳门';
                  }));
                  this.addMCLabel();
                }

              case 11:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function addProvinceLabel() {
        return _addProvinceLabel.apply(this, arguments);
      }

      return addProvinceLabel;
    }()
  }, {
    key: "addProvinceLine",
    value: function () {
      var _addProvinceLine = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee3(cfg) {
        var lineData, border1, border2, borderFc, borderFc2, nationalBorder, nationalFc;
        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.fetchData(cfg);

              case 2:
                lineData = _context3.sent;
                border1 = lineData.features.filter(function (feature) {
                  var type = feature.properties.type;
                  return type === '1';
                });
                border2 = lineData.features.filter(function (feature) {
                  var type = feature.properties.type;
                  return type === '4';
                });
                borderFc = {
                  type: 'FeatureCollection',
                  features: border1
                };
                borderFc2 = {
                  type: 'FeatureCollection',
                  features: border2
                };
                nationalBorder = lineData.features.filter(function (feature) {
                  var type = feature.properties.type;
                  return type !== '1' && type !== '4';
                });
                nationalFc = {
                  type: 'FeatureCollection',
                  features: nationalBorder
                };
                this.addNationBorder(nationalFc, borderFc, borderFc2);

              case 10:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function addProvinceLine(_x) {
        return _addProvinceLine.apply(this, arguments);
      }

      return addProvinceLine;
    }()
  }, {
    key: "loadData",
    value: function () {
      var _loadData = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee4() {
        var depth, countryConfig, fillData, fillLabel;
        return _regenerator.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                depth = this.options.depth;
                countryConfig = (0, _index.getDataConfig)(this.options.geoDataLevel).country.CHN[depth];
                _context4.next = 4;
                return this.fetchData(countryConfig.fill);

              case 4:
                fillData = _context4.sent;

                if (!countryConfig.label) {
                  _context4.next = 11;
                  break;
                }

                _context4.next = 8;
                return this.fetchData(countryConfig.label);

              case 8:
                _context4.t0 = _context4.sent;
                _context4.next = 12;
                break;

              case 11:
                _context4.t0 = null;

              case 12:
                fillLabel = _context4.t0;
                return _context4.abrupt("return", [fillData, fillLabel]);

              case 14:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function loadData() {
        return _loadData.apply(this, arguments);
      }

      return loadData;
    }()
  }, {
    key: "addNationBorder",
    value: function () {
      var _addNationBorder = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee5(boundaries, boundaries2, boundaries3) {
        var _this$options2, nationalStroke, provinceStroke, provinceStrokeWidth, nationalWidth, chinaNationalStroke, chinaNationalWidth, coastlineStroke, coastlineWidth, showBorder, stroke, strokeWidth, visible, zIndex, lineLayer, lineLayer2, lineLayer3;

        return _regenerator.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _this$options2 = this.options, nationalStroke = _this$options2.nationalStroke, provinceStroke = _this$options2.provinceStroke, provinceStrokeWidth = _this$options2.provinceStrokeWidth, nationalWidth = _this$options2.nationalWidth, chinaNationalStroke = _this$options2.chinaNationalStroke, chinaNationalWidth = _this$options2.chinaNationalWidth, coastlineStroke = _this$options2.coastlineStroke, coastlineWidth = _this$options2.coastlineWidth, showBorder = _this$options2.showBorder, stroke = _this$options2.stroke, strokeWidth = _this$options2.strokeWidth, visible = _this$options2.visible, zIndex = _this$options2.zIndex;
                lineLayer = new _l.LineLayer({
                  zIndex: zIndex + 0.1,
                  visible: visible && showBorder
                }).source(boundaries).size('type', function (v) {
                  if (v === '3') {
                    return provinceStrokeWidth;
                  } else if (v === '2') {
                    return coastlineWidth;
                  } else if (v === '0') {
                    return chinaNationalWidth;
                  } else {
                    return '#fff';
                  }
                }).shape('line').color('type', function (v) {
                  if (v === '3') {
                    return provinceStroke;
                  } else if (v === '2') {
                    return coastlineStroke;
                  } else if (v === '0') {
                    return chinaNationalStroke;
                  } else {
                    return '#fff';
                  }
                });
                lineLayer2 = new _l.LineLayer({
                  zIndex: zIndex + 0.1,
                  visible: visible && showBorder
                }).source(boundaries2).size(chinaNationalWidth).shape('line').color(chinaNationalStroke).style({
                  lineType: 'dash',
                  dashArray: [2, 2]
                });
                lineLayer3 = new _l.LineLayer({
                  zIndex: zIndex + 0.1,
                  visible: visible && showBorder
                }).source(boundaries3).size(provinceStrokeWidth).shape('line').color(provinceStroke).style({
                  lineType: 'dash',
                  dashArray: [4, 2, 2, 2]
                });
                this.scene.addLayer(lineLayer);
                this.scene.addLayer(lineLayer2);
                this.scene.addLayer(lineLayer3);
                this.layers.push(lineLayer, lineLayer2, lineLayer3);

              case 8:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function addNationBorder(_x2, _x3, _x4) {
        return _addNationBorder.apply(this, arguments);
      }

      return addNationBorder;
    }()
  }, {
    key: "addCityBorder",
    value: function () {
      var _addCityBorder = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee6(cfg) {
        var border1, _this$options3, cityStroke, cityStrokeWidth, visible, cityline;

        return _regenerator.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this.fetchData(cfg);

              case 2:
                border1 = _context6.sent;
                _this$options3 = this.options, cityStroke = _this$options3.cityStroke, cityStrokeWidth = _this$options3.cityStrokeWidth, visible = _this$options3.visible;
                cityline = new _l.LineLayer({
                  zIndex: 2,
                  visible: visible
                }).source(border1).color(cityStroke).size(cityStrokeWidth).style({
                  opacity: 0.5
                });
                this.scene.addLayer(cityline);
                this.layers.push(cityline);

              case 7:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function addCityBorder(_x5) {
        return _addCityBorder.apply(this, arguments);
      }

      return addCityBorder;
    }()
  }, {
    key: "addCountyBorder",
    value: function () {
      var _addCountyBorder = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee7(cfg) {
        var border1, _this$options4, countyStrokeWidth, countyStroke, visible, cityline;

        return _regenerator.default.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this.fetchData(cfg);

              case 2:
                border1 = _context7.sent;
                _this$options4 = this.options, countyStrokeWidth = _this$options4.countyStrokeWidth, countyStroke = _this$options4.countyStroke, visible = _this$options4.visible;
                cityline = new _l.LineLayer({
                  zIndex: 2,
                  visible: visible
                }).source(border1).color(countyStroke).size(countyStrokeWidth).style({
                  opacity: 0.5
                });
                this.scene.addLayer(cityline);
                this.layers.push(cityline);

              case 7:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function addCountyBorder(_x6) {
        return _addCountyBorder.apply(this, arguments);
      }

      return addCountyBorder;
    }()
  }, {
    key: "addMCLabel",
    value: function addMCLabel() {
      var data = [{
        name: '澳门',
        center: [113.537747, 22.187009]
      }];
      var labelLayer1 = this.addText(data, {
        maxZoom: 2.9
      }, [-45, -10]);
      var labelLayer2 = this.addText(data, {
        minZoom: 3,
        maxZoom: 4
      }, [-35, -10]);
      var labelLayer = this.addText(data, {
        minZoom: 4.1
      }, [0, 0]);
      this.scene.addLayer(labelLayer);
      this.scene.addLayer(labelLayer1);
      this.scene.addLayer(labelLayer2);
      this.layers.push(labelLayer, labelLayer1, labelLayer2);
    }
  }, {
    key: "addText",
    value: function addText(labelData, option, offset) {
      var _this$options5 = this.options,
          label = _this$options5.label,
          zIndex = _this$options5.zIndex,
          visible = _this$options5.visible;
      var labelLayer = new _l.PointLayer(_objectSpread({
        zIndex: zIndex + 0.4,
        visible: visible
      }, option)).source(labelData, {
        parser: {
          type: 'json',
          coordinates: 'center'
        }
      }).color(label.color).shape('name', 'text').size(label.size).style({
        opacity: label.opacity,
        stroke: label.stroke,
        strokeWidth: label.strokeWidth,
        textAllowOverlap: label.textAllowOverlap,
        textOffset: offset
      });
      return labelLayer;
    }
  }]);
  return CountryLayer;
}(_baseLayer.default);

exports.default = CountryLayer;
//# sourceMappingURL=country.js.map