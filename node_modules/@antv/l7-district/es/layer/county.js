import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _get from "@babel/runtime/helpers/get";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import merge from 'lodash/merge';
import ProvinceLayer from './province';

var CityLayer = function (_ProvinceLayer) {
  _inherits(CityLayer, _ProvinceLayer);

  var _super = _createSuper(CityLayer);

  function CityLayer() {
    _classCallCheck(this, CityLayer);

    return _super.apply(this, arguments);
  }

  _createClass(CityLayer, [{
    key: "getDefaultOption",
    value: function getDefaultOption() {
      var config = _get(_getPrototypeOf(CityLayer.prototype), "getDefaultOption", this).call(this);

      return merge({}, config, {
        adcode: ['110100'],
        depth: 3
      });
    }
  }, {
    key: "filterData",
    value: function filterData(data, adcode) {
      var adcodeArray = Array.isArray(adcode) ? adcode : [adcode];
      var features = data.features.filter(function (fe) {
        var code = fe.properties.adcode;
        return adcodeArray.indexOf(code) !== -1 || adcodeArray.indexOf('' + code) !== -1;
      });
      return {
        type: 'FeatureCollection',
        features: features
      };
    }
  }, {
    key: "filterLabelData",
    value: function filterLabelData(data, adcode) {
      var adcodeArray = Array.isArray(adcode) ? adcode : [adcode];
      var features = data.filter(function (fe) {
        var code = fe.adcode;
        return adcodeArray.indexOf(code) !== -1 || adcodeArray.indexOf('' + code) !== -1;
      });
      return features;
    }
  }]);

  return CityLayer;
}(ProvinceLayer);

export { CityLayer as default };
//# sourceMappingURL=county.js.map