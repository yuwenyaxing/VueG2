{"version":3,"sources":["../../src/layer/province.ts"],"names":["merge","getDataConfig","BaseLayer","ProvinceLayer","scene","option","fillRawData","lineRawData","labelRawData","addProvinceFillLayer","adcode","newData","joinByField","Array","isArray","length","hide","options","label","showBorder","setOption","fillData","filterData","lineData","labelData","filterLabelData","bubble","enable","bubbleData","features","map","feature","properties","center","x","y","bubbleLayer","setData","updateData","lineLayer","labelLayer","show","config","depth","field","textAllowOverlap","popup","Html","props","NAME_CHN","data","adcodeArray","filter","fe","code","adcode_pro","indexOf","type","countryConfig","geoDataLevel","country","CHN","fetchData","fill","addFillLayer","addLabelLayer","addFillLine","line"],"mappings":"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","sourcesContent":["import {\n  ILayer,\n  LineLayer,\n  PointLayer,\n  PolygonLayer,\n  Scene,\n  StyleAttrField,\n} from '@antv/l7';\n// tslint:disable-next-line: no-submodule-imports\nimport merge from 'lodash/merge';\nimport { getDataConfig } from '../';\nimport BaseLayer from './baseLayer';\nimport { adcodeType, IDistrictLayerOption } from './interface';\n\nexport interface IProvinceLayerOption extends IDistrictLayerOption {\n  adcode: adcodeType;\n}\nexport default class ProvinceLayer extends BaseLayer {\n  private fillRawData: any;\n  private lineRawData: any;\n  private labelRawData: any;\n  constructor(scene: Scene, option: Partial<IProvinceLayerOption> = {}) {\n    super(scene, option);\n    this.addProvinceFillLayer();\n    // this.addProvinceLineLayer();\n  }\n  // 通过adcode 更新\n  public updateDistrict(\n    adcode: adcodeType,\n    newData?: Array<{ [key: string]: any }>,\n    joinByField?: [string, string],\n  ) {\n    if (!adcode && Array.isArray(adcode) && adcode.length === 0) {\n      this.hide();\n      return;\n    }\n    const { label, showBorder } = this.options;\n    this.setOption({ adcode });\n    const fillData = this.filterData(this.fillRawData, adcode);\n    const lineData = this.filterData(this.lineRawData, adcode);\n    const labelData = this.filterLabelData(this.labelRawData, adcode);\n    if (this.options.bubble && this.options.bubble?.enable !== false) {\n      const bubbleData = fillData.features.map((feature: any) => {\n        return {\n          ...feature.properties,\n          center: [feature.properties.x, feature.properties.y],\n        };\n      });\n      this.bubbleLayer.setData(bubbleData);\n    }\n    this.fillData = fillData;\n    this.updateData(newData, joinByField);\n    if (showBorder) {\n      this.lineLayer.setData(lineData);\n    }\n    if (label.enable) {\n      this.labelLayer.setData(labelData);\n    }\n\n    this.show();\n  }\n\n  protected getDefaultOption(): IProvinceLayerOption {\n    const config = super.getDefaultOption();\n    return merge({}, config, {\n      adcode: ['110000'],\n      depth: 2,\n      label: {\n        field: 'NAME_CHN',\n        textAllowOverlap: false,\n      },\n      popup: {\n        enable: true,\n        Html: (props: any) => {\n          return `<span>${props.NAME_CHN}</span>`;\n        },\n      },\n    });\n  }\n\n  protected filterData(data: any, adcode: adcodeType) {\n    const adcodeArray = Array.isArray(adcode) ? adcode : [adcode];\n    const features = data.features.filter((fe: any) => {\n      const code = fe.properties.adcode_pro;\n      return (\n        adcodeArray.indexOf(code) !== -1 ||\n        adcodeArray.indexOf('' + code) !== -1\n      );\n    });\n    return { type: 'FeatureCollection', features };\n  }\n\n  protected filterLabelData(data: any, adcode: adcodeType) {\n    const adcodeArray = Array.isArray(adcode) ? adcode : [adcode];\n    const features = data.filter((fe: any) => {\n      const code = fe.adcode_pro;\n      return (\n        adcodeArray.indexOf(code) !== -1 ||\n        adcodeArray.indexOf('' + code) !== -1\n      );\n    });\n    return features;\n  }\n  private async addProvinceFillLayer() {\n    const { depth, adcode, label, showBorder } = this\n      .options as IProvinceLayerOption;\n    const countryConfig = getDataConfig(this.options.geoDataLevel).country.CHN[\n      depth\n    ];\n    const fillData = await this.fetchData(countryConfig.fill);\n\n    this.labelRawData = fillData.features.map((feature: any) => {\n      return {\n        ...feature.properties,\n        center: [feature.properties.x, feature.properties.y],\n      };\n    });\n    const data = this.filterData(fillData, adcode);\n    this.fillData = data;\n    const labelData = this.filterLabelData(this.labelRawData, adcode);\n    this.fillRawData = fillData;\n    this.addFillLayer(data);\n    if (label.enable) {\n      this.addLabelLayer(labelData);\n    }\n    this.lineRawData = fillData;\n    if (showBorder) {\n      this.addFillLine(data);\n    }\n  }\n\n  private async addProvinceLineLayer() {\n    const { depth, adcode } = this.options as IProvinceLayerOption;\n    const countryConfig = getDataConfig(this.options.geoDataLevel).country.CHN[\n      depth\n    ];\n    const fillData = await this.fetchData(countryConfig.line);\n    const data = this.filterData(fillData, adcode);\n    this.lineRawData = fillData;\n    this.addFillLine(data);\n  }\n}\n"],"file":"province.js"}