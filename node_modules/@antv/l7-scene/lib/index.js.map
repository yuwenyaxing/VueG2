{"version":3,"sources":["../src/index.ts"],"names":["Scene","config","sceneService","mapService","controlService","layerService","iconService","markerService","popupService","fontService","interactionService","container","id","map","sceneContainer","setContainer","bind","TYPES","IRendererService","to","ReglRendererService","inSingletonScope","get","ISceneService","IMapService","IIconService","IFontService","IControlService","ILayerService","IMarkerService","IInteractionService","IPopupService","initComponent","init","initControl","getSize","getMinZoom","getMaxZoom","getType","getMapContainer","getMapCanvasContainer","type","exportPng","render","loaded","renderSerivce","on","layer","layerContainer","addLayer","getLayers","getLayer","name","getLayerByName","remove","removeAllLayers","img","addImage","hasImage","removeImage","fontFamily","glyphs","addIconGlyphs","ctr","addControl","removeControl","getControlByName","marker","addMarker","addMarkerLayer","removeMarkerLayer","removeAllMarkers","popup","addPopup","handle","SceneEventList","indexOf","off","getZoom","getCenter","center","setCenter","getPitch","pitch","setPitch","getRotation","getBounds","rotation","setRotation","zoomIn","zoomOut","p","panTo","pixel","getContainer","zoom","setZoom","bound","options","getSceneConfig","fitBoundsOptions","animate","fitBounds","setZoomAndCenter","style","setMapStyle","setMapStatus","pixelToLngLat","lnglat","lngLatToPixel","containerToLngLat","lngLatToContainer","destroy","constructor","IPostProcessingPass","whenTargetNamed","DOM","logoVisible","logoPosition","Logo","position"],"mappings":"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","sourcesContent":["import { Logo } from '@antv/l7-component';\nimport {\n  Bounds,\n  createLayerContainer,\n  createSceneContainer,\n  IControl,\n  IControlService,\n  IFontService,\n  IIconFontGlyph,\n  IIconService,\n  IImage,\n  IInteractionService,\n  ILayer,\n  ILayerService,\n  ILngLat,\n  IMapService,\n  IMarker,\n  IMarkerLayer,\n  IMarkerService,\n  IPoint,\n  IPopup,\n  IPopupService,\n  IPostProcessingPass,\n  IRendererService,\n  ISceneConfig,\n  ISceneService,\n  IStatusOptions,\n  Point,\n  SceneEventList,\n  TYPES,\n} from '@antv/l7-core';\nimport { ReglRendererService } from '@antv/l7-renderer';\nimport { DOM } from '@antv/l7-utils';\nimport { Container } from 'inversify';\nimport ILayerManager from './ILayerManager';\nimport IMapController from './IMapController';\nimport IPostProcessingPassPluggable from './IPostProcessingPassPluggable';\n\n/**\n * 暴露 Scene API\n *\n * @example\n * import { Scene } from 'l7/scene';\n * import { PointLayer } from 'l7/layers';\n *\n * const scene = new Scene();\n * const pointLayer = new PointLayer();\n * scene.addLayer(pointLayer);\n *\n */\nclass Scene\n  implements IPostProcessingPassPluggable, IMapController, ILayerManager {\n  private sceneService: ISceneService;\n  private mapService: IMapService<unknown>;\n  private controlService: IControlService;\n  private layerService: ILayerService;\n  private iconService: IIconService;\n  private markerService: IMarkerService;\n  private popupService: IPopupService;\n  private fontService: IFontService;\n  private interactionService: IInteractionService;\n  private container: Container;\n\n  public constructor(config: ISceneConfig) {\n    const { id, map } = config;\n    // 创建场景容器\n    const sceneContainer = createSceneContainer();\n    this.container = sceneContainer;\n    // 绑定地图服务\n    map.setContainer(sceneContainer, id);\n\n    // 绑定渲染引擎服务\n    sceneContainer\n      .bind<IRendererService>(TYPES.IRendererService)\n      .to(ReglRendererService)\n      .inSingletonScope();\n\n    // 依赖注入\n    this.sceneService = sceneContainer.get<ISceneService>(TYPES.ISceneService);\n    this.mapService = sceneContainer.get<IMapService<unknown>>(\n      TYPES.IMapService,\n    );\n    this.iconService = sceneContainer.get<IIconService>(TYPES.IIconService);\n    this.fontService = sceneContainer.get<IFontService>(TYPES.IFontService);\n    this.controlService = sceneContainer.get<IControlService>(\n      TYPES.IControlService,\n    );\n    this.layerService = sceneContainer.get<ILayerService>(TYPES.ILayerService);\n\n    this.markerService = sceneContainer.get<IMarkerService>(\n      TYPES.IMarkerService,\n    );\n    this.interactionService = sceneContainer.get<IInteractionService>(\n      TYPES.IInteractionService,\n    );\n    this.popupService = sceneContainer.get<IPopupService>(TYPES.IPopupService);\n\n    this.initComponent(id);\n\n    // 初始化 scene\n    this.sceneService.init(config);\n    // TODO: 初始化组件\n\n    this.initControl();\n  }\n  public getServiceContainer(): Container {\n    return this.container;\n  }\n  public getSize(): [number, number] {\n    return this.mapService.getSize();\n  }\n  public getMinZoom(): number {\n    return this.mapService.getMinZoom();\n  }\n  public getMaxZoom(): number {\n    return this.mapService.getMaxZoom();\n  }\n  public getType(): string {\n    return this.mapService.getType();\n  }\n  public getMapContainer(): HTMLElement | null {\n    return this.mapService.getMapContainer();\n  }\n  public getMapCanvasContainer(): HTMLElement {\n    return this.mapService.getMapCanvasContainer() as HTMLElement;\n  }\n\n  public getMapService(): IMapService<unknown> {\n    return this.mapService;\n  }\n  public exportPng(type?: 'png' | 'jpg'): string {\n    return this.sceneService.exportPng(type);\n  }\n\n  public exportMap(type?: 'png' | 'jpg'): string {\n    return this.sceneService.exportPng(type);\n  }\n\n  public registerRenderService(render: any) {\n    if (this.sceneService.loaded) {\n      const renderSerivce = new render(this);\n      renderSerivce.init();\n    } else {\n      this.on('loaded', () => {\n        const renderSerivce = new render(this);\n        renderSerivce.init();\n      });\n    }\n  }\n\n  public get map() {\n    return this.mapService.map;\n  }\n\n  // layer 管理\n  public addLayer(layer: ILayer): void {\n    // 为当前图层创建一个容器\n    // TODO: 初始化的时候设置 容器\n    const layerContainer = createLayerContainer(this.container);\n    layer.setContainer(layerContainer);\n    this.sceneService.addLayer(layer);\n  }\n\n  public getLayers(): ILayer[] {\n    return this.layerService.getLayers();\n  }\n\n  public getLayer(id: string): ILayer | undefined {\n    return this.layerService.getLayer(id);\n  }\n\n  public getLayerByName(name: string): ILayer | undefined {\n    return this.layerService.getLayerByName(name);\n  }\n\n  public removeLayer(layer: ILayer): void {\n    this.layerService.remove(layer);\n  }\n\n  public removeAllLayer(): void {\n    this.layerService.removeAllLayers();\n  }\n\n  public render(): void {\n    this.sceneService.render();\n  }\n\n  // asset method\n  public addImage(id: string, img: IImage) {\n    this.iconService.addImage(id, img);\n  }\n\n  public hasImage(id: string) {\n    return this.iconService.hasImage(id);\n  }\n\n  public removeImage(id: string) {\n    this.iconService.removeImage(id);\n  }\n\n  public addIconFontGlyphs(fontFamily: string, glyphs: IIconFontGlyph[]) {\n    this.fontService.addIconGlyphs(glyphs);\n  }\n\n  // map control method\n  public addControl(ctr: IControl) {\n    this.controlService.addControl(ctr, this.container);\n  }\n\n  public removeControl(ctr: IControl) {\n    this.controlService.removeControl(ctr);\n  }\n\n  public getControlByName(name: string) {\n    return this.controlService.getControlByName(name);\n  }\n\n  // marker\n  public addMarker(marker: IMarker) {\n    this.markerService.addMarker(marker);\n  }\n\n  public addMarkerLayer(layer: IMarkerLayer) {\n    this.markerService.addMarkerLayer(layer);\n  }\n\n  public removeMarkerLayer(layer: IMarkerLayer) {\n    this.markerService.removeMarkerLayer(layer);\n  }\n\n  public removeAllMakers() {\n    this.markerService.removeAllMarkers();\n  }\n\n  public addPopup(popup: IPopup) {\n    this.popupService.addPopup(popup);\n  }\n\n  public on(type: string, handle: (...args: any[]) => void): void {\n    SceneEventList.indexOf(type) === -1\n      ? this.mapService.on(type, handle)\n      : this.sceneService.on(type, handle);\n  }\n\n  public off(type: string, handle: (...args: any[]) => void): void {\n    SceneEventList.indexOf(type) === -1\n      ? this.mapService.off(type, handle)\n      : this.sceneService.off(type, handle);\n  }\n\n  // implements IMapController\n\n  public getZoom(): number {\n    return this.mapService.getZoom();\n  }\n\n  public getCenter(): ILngLat {\n    return this.mapService.getCenter();\n  }\n\n  public setCenter(center: [number, number]) {\n    return this.mapService.setCenter(center);\n  }\n\n  public getPitch(): number {\n    return this.mapService.getPitch();\n  }\n\n  public setPitch(pitch: number) {\n    return this.mapService.setPitch(pitch);\n  }\n\n  public getRotation(): number {\n    return this.mapService.getRotation();\n  }\n\n  public getBounds(): Bounds {\n    return this.mapService.getBounds();\n  }\n\n  public setRotation(rotation: number): void {\n    this.mapService.setRotation(rotation);\n  }\n  public zoomIn(): void {\n    this.mapService.zoomIn();\n  }\n\n  public zoomOut(): void {\n    this.mapService.zoomOut();\n  }\n\n  public panTo(p: Point): void {\n    this.mapService.panTo(p);\n  }\n\n  public panBy(pixel: Point): void {\n    this.mapService.panTo(pixel);\n  }\n\n  public getContainer() {\n    return this.mapService.getContainer();\n  }\n  public setZoom(zoom: number): void {\n    this.mapService.setZoom(zoom);\n  }\n  public fitBounds(bound: Bounds, options?: unknown): void {\n    const { fitBoundsOptions, animate } = this.sceneService.getSceneConfig();\n    this.mapService.fitBounds(\n      bound,\n      // 选项优先级：用户传入，覆盖animate直接配置，覆盖Scene配置项传入\n      options || {\n        ...(fitBoundsOptions as object),\n        animate,\n      },\n    );\n  }\n\n  public setZoomAndCenter(zoom: number, center: Point): void {\n    this.mapService.setZoomAndCenter(zoom, center);\n  }\n\n  public setMapStyle(style: any): void {\n    this.mapService.setMapStyle(style);\n  }\n\n  public setMapStatus(options: Partial<IStatusOptions>) {\n    this.mapService.setMapStatus(options);\n  }\n\n  // conversion Method\n  public pixelToLngLat(pixel: Point): ILngLat {\n    return this.mapService.pixelToLngLat(pixel);\n  }\n\n  public lngLatToPixel(lnglat: Point): IPoint {\n    return this.mapService.lngLatToPixel(lnglat);\n  }\n\n  public containerToLngLat(pixel: Point): ILngLat {\n    return this.mapService.containerToLngLat(pixel);\n  }\n\n  public lngLatToContainer(lnglat: Point): IPoint {\n    return this.mapService.lngLatToContainer(lnglat);\n  }\n\n  public destroy() {\n    this.sceneService.destroy();\n    // TODO: 清理其他 Service 例如 IconService\n  }\n\n  public registerPostProcessingPass(\n    constructor: new (...args: any[]) => IPostProcessingPass<unknown>,\n    name: string,\n  ) {\n    this.container\n      .bind<IPostProcessingPass<unknown>>(TYPES.IPostProcessingPass)\n      .to(constructor)\n      .whenTargetNamed(name);\n  }\n\n  private initComponent(id: string | HTMLDivElement) {\n    this.controlService.init(\n      {\n        container: DOM.getContainer(id),\n      },\n      this.container,\n    );\n    this.markerService.init(this.container);\n    this.popupService.init(this.container);\n  }\n\n  private initControl() {\n    const { logoVisible, logoPosition } = this.sceneService.getSceneConfig();\n    if (logoVisible) {\n      this.addControl(new Logo({ position: logoPosition }));\n    }\n  }\n  // 资源管理\n}\n\nexport { Scene };\n"],"file":"index.js"}