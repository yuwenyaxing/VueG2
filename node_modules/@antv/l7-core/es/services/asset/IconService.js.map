{"version":3,"sources":["../../../src/services/asset/IconService.ts"],"names":["EventEmitter","injectable","buildIconMaping","BUFFER","MAX_CANVAS_WIDTH","imageSize","IconService","canvasHeight","texture","canvas","iconData","iconMap","ctx","document","createElement","getContext","id","image","imagedata","Image","hasImage","Error","push","width","height","updateIconMap","loadImage","then","img","iconImage","find","icon","update","hasOwnProperty","filter","updateIconAtlas","emit","Object","keys","forEach","item","x","y","drawImage","mapping","url","Promise","resolve","reject","HTMLImageElement","crossOrigin","onload","onerror","src","File","URL","createObjectURL"],"mappings":"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","sourcesContent":["import { EventEmitter } from 'eventemitter3';\nimport { inject, injectable } from 'inversify';\nimport { TYPES } from '../../types';\nimport { buildIconMaping } from '../../utils/font_util';\nimport { ITexture2D } from '../renderer/ITexture2D';\nimport {\n  IIcon,\n  IICONMap,\n  IIconService,\n  IIconValue,\n  IImage,\n} from './IIconService';\nconst BUFFER = 3;\nconst MAX_CANVAS_WIDTH = 1024;\nconst imageSize = 64;\n@injectable()\nexport default class IconService extends EventEmitter implements IIconService {\n  public canvasHeight: number;\n  private texture: ITexture2D;\n  private canvas: HTMLCanvasElement;\n  private iconData: IIcon[];\n  private iconMap: IICONMap;\n  private ctx: CanvasRenderingContext2D;\n  public init() {\n    this.iconData = [];\n    this.iconMap = {};\n    this.canvas = document.createElement('canvas');\n    this.ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;\n  }\n\n  public addImage(id: string, image: IImage) {\n    let imagedata = new Image();\n    if (this.hasImage(id)) {\n      throw new Error('Image Id already exists');\n    }\n    this.iconData.push({\n      id,\n      width: imageSize,\n      height: imageSize,\n    });\n    this.updateIconMap();\n    this.loadImage(image).then((img) => {\n      imagedata = img as HTMLImageElement;\n      const iconImage = this.iconData.find((icon: IIcon) => {\n        return icon.id === id;\n      });\n      if (iconImage) {\n        iconImage.image = imagedata;\n      }\n      // this.iconData.push({\n      //   id,\n      //   image: imagedata,\n      //   width: imageSize,\n      //   height: imageSize,\n      // });\n      this.update();\n    });\n  }\n\n  public getTexture(): ITexture2D {\n    return this.texture;\n  }\n\n  public getIconMap() {\n    return this.iconMap;\n  }\n\n  public getCanvas() {\n    return this.canvas;\n  }\n\n  public hasImage(id: string): boolean {\n    return this.iconMap.hasOwnProperty(id);\n  }\n\n  public removeImage(id: string): void {\n    if (this.hasImage(id)) {\n      this.iconData = this.iconData.filter((icon) => {\n        return icon.id !== id;\n      });\n      delete this.iconMap[id];\n      this.update();\n    }\n  }\n  public destroy(): void {\n    this.iconData = [];\n    this.iconMap = {};\n  }\n  private update() {\n    this.updateIconMap();\n    this.updateIconAtlas();\n    this.emit('imageUpdate');\n  }\n\n  private updateIconAtlas() {\n    this.canvas.width = MAX_CANVAS_WIDTH;\n    this.canvas.height = this.canvasHeight;\n    Object.keys(this.iconMap).forEach((item: string) => {\n      const { x, y, image } = this.iconMap[item];\n      if (image) {\n        this.ctx.drawImage(image, x, y, imageSize, imageSize);\n      }\n    });\n  }\n\n  private updateIconMap() {\n    const { mapping, canvasHeight } = buildIconMaping(\n      this.iconData,\n      BUFFER,\n      MAX_CANVAS_WIDTH,\n    );\n    this.iconMap = mapping;\n    this.canvasHeight = canvasHeight;\n  }\n\n  private loadImage(url: IImage) {\n    return new Promise((resolve, reject) => {\n      if (url instanceof HTMLImageElement) {\n        resolve(url);\n        return;\n      }\n      const image = new Image();\n      image.crossOrigin = 'anonymous';\n      image.onload = () => {\n        resolve(image);\n      };\n      image.onerror = () => {\n        reject(new Error('Could not load image at ' + url));\n      };\n      image.src = url instanceof File ? URL.createObjectURL(url) : url;\n    });\n  }\n}\n"],"file":"IconService.js"}