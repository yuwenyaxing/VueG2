{"version":3,"sources":["../../src/utils/font_util.ts"],"names":["glyphSizeInSDF","buildMapping","characterSet","getFontWidth","fontHeight","buffer","maxCanvasWidth","mapping","xOffset","yOffset","row","x","Array","from","forEach","char","i","width","y","height","advance","rowHeight","canvasHeight","nextPowOfTwo","buildIconMaping","icons","columns","icon","id","buildRowMapping","push","Math","max","length","column","image","num","pow","ceil","log2"],"mappings":"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","sourcesContent":["import { IFontMappingOption } from '../services/asset/IFontService';\nimport { IIcon, IICONMap } from '../services/asset/IIconService';\n/**\n * tiny-sdf 中每个 glyph 的宽度（加上 buffer 24 + 3 + 3 = 30）\n */\nconst glyphSizeInSDF = 30;\nexport function buildMapping({\n  characterSet,\n  getFontWidth,\n  fontHeight,\n  buffer,\n  maxCanvasWidth,\n  mapping = {},\n  xOffset = 0,\n  yOffset = 0,\n}: IFontMappingOption) {\n  let row = 0;\n  let x = xOffset;\n  Array.from(characterSet).forEach((char: string, i: number) => {\n    if (!mapping[char]) {\n      const width = getFontWidth(char, i);\n      if (x + glyphSizeInSDF > maxCanvasWidth) {\n        x = 0;\n        row++;\n      }\n      mapping[char] = {\n        x,\n        y: yOffset + row * glyphSizeInSDF,\n        width: glyphSizeInSDF,\n        height: glyphSizeInSDF,\n        advance: width,\n      };\n      x += glyphSizeInSDF;\n    }\n  });\n\n  const rowHeight = fontHeight + buffer * 2;\n\n  return {\n    mapping,\n    xOffset: x,\n    yOffset: yOffset + row * rowHeight,\n    canvasHeight: nextPowOfTwo(yOffset + (row + 1) * rowHeight),\n  };\n}\n\nexport function buildIconMaping(\n  icons: IIcon[],\n  buffer: number,\n  maxCanvasWidth: number,\n) {\n  let xOffset = 0;\n  let yOffset = 0;\n  let rowHeight = 0;\n  let columns = [];\n  const mapping: IICONMap = {};\n  for (const icon of icons) {\n    if (!mapping[icon.id]) {\n      const { height, width } = icon;\n\n      // fill one row\n      if (xOffset + width + buffer > maxCanvasWidth) {\n        buildRowMapping(mapping, columns, yOffset);\n\n        xOffset = 0;\n        yOffset = rowHeight + yOffset + buffer;\n        rowHeight = 0;\n        columns = [];\n      }\n\n      columns.push({\n        icon,\n        xOffset,\n      });\n\n      xOffset = xOffset + width + buffer;\n      rowHeight = Math.max(rowHeight, height);\n    }\n  }\n\n  if (columns.length > 0) {\n    buildRowMapping(mapping, columns, yOffset);\n  }\n\n  const canvasHeight = nextPowOfTwo(rowHeight + yOffset + buffer);\n\n  return {\n    mapping,\n    canvasHeight,\n  };\n}\nfunction buildRowMapping(\n  mapping: IICONMap,\n  columns: Array<{\n    icon: IIcon;\n    xOffset: number;\n  }>,\n  yOffset: number,\n) {\n  for (const column of columns) {\n    const { icon, xOffset } = column;\n    mapping[icon.id] = { ...icon, x: xOffset, y: yOffset, image: icon.image };\n  }\n}\nexport function nextPowOfTwo(num: number) {\n  return Math.pow(2, Math.ceil(Math.log2(num)));\n}\n"],"file":"font_util.js"}