{"version":3,"sources":["../../../src/services/scene/SceneService.ts"],"names":["Scene","TYPES","SceneID","IIconService","IFontService","IControlService","ILogService","IGlobalConfigService","IMapService","ICoordinateSystemService","IRendererService","ILayerService","ICameraService","IInteractionService","IPickingService","IShaderModuleService","IMarkerService","IPopupService","destroyed","loaded","inited","initPromise","rendering","$container","canvas","hooks","handleWindowResized","emit","initContainer","DOM","triggerResize","coordinateSystemService","needRefresh","render","handleMapCameraChanged","viewport","cameraService","update","init","AsyncParallelHook","sceneConfig","configService","setSceneConfig","id","shaderModuleService","registerBuiltinModules","iconService","fontService","tapPromise","Promise","resolve","map","onCameraChanged","addMarkerContainer","markerService","addMarkers","addMarkerLayers","popupService","initPopup","interactionService","on","InteractionEvent","Drag","addSceneEvent","bind","logger","debug","getSceneConfig","create","setCanvas","rendererService","window","matchMedia","addListener","error","pickingService","promise","layer","name","layerService","add","destroy","info","initLayers","controlService","addControls","renderLayers","type","renderCanvas","getElementsByTagName","layersPng","toDataURL","removeAllListeners","removeListener","pixelRatio","devicePixelRatio","w","clientWidth","h","clientHeight","width","height","style","x","y","target","EventEmitter"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AASA;;;;;;;;IAiBqBA,K,WADpB,4B,UAME,uBAAOC,aAAMC,OAAb,C,UAKA,uBAAOD,aAAME,YAAb,C,UAGA,uBAAOF,aAAMG,YAAb,C,UAGA,uBAAOH,aAAMI,eAAb,C,UAGA,uBAAOJ,aAAMK,WAAb,C,UAGA,uBAAOL,aAAMM,oBAAb,C,UAGA,uBAAON,aAAMO,WAAb,C,UAGA,uBAAOP,aAAMQ,wBAAb,C,WAGA,uBAAOR,aAAMS,gBAAb,C,WAGA,uBAAOT,aAAMU,aAAb,C,WAGA,uBAAOV,aAAMW,cAAb,C,WAGA,uBAAOX,aAAMY,mBAAb,C,WAGA,uBAAOZ,aAAMa,eAAb,C,WAGA,uBAAOb,aAAMc,oBAAb,C,WAGA,uBAAOd,aAAMe,cAAb,C,WAGA,uBAAOf,aAAMgB,aAAb,C;;;;;AAuBD,mBAAqB;AAAA;;AAAA;AACnB;AADmB,UA1EdC,SA0Ec,GA1EO,KA0EP;AAAA,UAxEdC,MAwEc,GAxEI,KAwEJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAjBbC,MAiBa,GAjBK,KAiBL;AAAA,UAhBbC,WAgBa;AAAA,UAbbC,SAaa,GAbQ,KAaR;AAAA,UARbC,UAQa;AAAA,UANbC,MAMa;AAAA,UAJbC,KAIa;;AAAA,UAiLbC,mBAjLa,GAiLS,YAAM;AAClC,YAAKC,IAAL,CAAU,QAAV;;AAEA,UAAI,MAAKJ,UAAT,EAAqB;AACnB,cAAKK,aAAL;;AACAC,qBAAIC,aAAJ;;AACA,cAAKC,uBAAL,CAA6BC,WAA7B,GAA2C,IAA3C;;AAGA,cAAKC,MAAL;AACD;AACF,KA5LoB;;AAAA,UA2NbC,sBA3Na,GA2NY,UAACC,QAAD,EAAyB;AACxD,YAAKC,aAAL,CAAmBC,MAAnB,CAA0BF,QAA1B;;AACA,YAAKF,MAAL;AACD,KA9NoB;;AAGnB,UAAKR,KAAL,GAAa;AAOXa,MAAAA,IAAI,EAAE,IAAIC,4BAAJ;AAPK,KAAb;AAHmB;AAYpB;;;;yBAEWC,W,EAA2B;AAAA;;AAErC,WAAKC,aAAL,CAAmBC,cAAnB,CAAkC,KAAKC,EAAvC,EAA2CH,WAA3C;AAGA,WAAKI,mBAAL,CAAyBC,sBAAzB;AAGA,WAAKC,WAAL,CAAiBR,IAAjB;AAEA,WAAKS,WAAL,CAAiBT,IAAjB;AAKA,WAAKb,KAAL,CAAWa,IAAX,CAAgBU,UAAhB,CAA2B,SAA3B,4DAAsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAE9B,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC7B,kBAAA,MAAI,CAACC,GAAL,CAASC,eAAT,CAAyB,UAACjB,QAAD,EAAyB;AAChD,oBAAA,MAAI,CAACC,aAAL,CAAmBE,IAAnB;;AACA,oBAAA,MAAI,CAACF,aAAL,CAAmBC,MAAnB,CAA0BF,QAA1B;;AACAe,oBAAAA,OAAO;AACR,mBAJD;;AAKA,kBAAA,MAAI,CAACC,GAAL,CAASb,IAAT;AACD,iBAPK,CAF8B;;AAAA;AAYpC,gBAAA,MAAI,CAACa,GAAL,CAASC,eAAT,CAAyB,MAAI,CAAClB,sBAA9B;;AACA,gBAAA,MAAI,CAACiB,GAAL,CAASE,kBAAT;;AAGA,gBAAA,MAAI,CAACC,aAAL,CAAmBC,UAAnB;;AACA,gBAAA,MAAI,CAACD,aAAL,CAAmBE,eAAnB;;AACA,gBAAA,MAAI,CAACC,YAAL,CAAkBC,SAAlB;;AAEA,gBAAA,MAAI,CAACC,kBAAL,CAAwBrB,IAAxB;;AACA,gBAAA,MAAI,CAACqB,kBAAL,CAAwBC,EAAxB,CACEC,sCAAiBC,IADnB,EAEE,MAAI,CAACC,aAAL,CAAmBC,IAAnB,CAAwB,MAAxB,CAFF;;AAIA,gBAAA,MAAI,CAACC,MAAL,CAAYC,KAAZ,eAAyB,MAAI,CAACvB,EAA9B;;AAzBoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAtC;AA+BA,WAAKlB,KAAL,CAAWa,IAAX,CAAgBU,UAAhB,CAA2B,cAA3B,4DAA2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAEnCzB,gBAAAA,UAFmC,GAEtB,kCACjB,MAAI,CAACkB,aAAL,CAAmB0B,cAAnB,CAAkC,MAAI,CAACxB,EAAvC,EAA2CA,EAA3C,IAAiD,EADhC,CAFsB;AAKzC,gBAAA,MAAI,CAACpB,UAAL,GAAkBA,UAAlB;;AALyC,qBAOrCA,UAPqC;AAAA;AAAA;AAAA;;AAQvC,gBAAA,MAAI,CAACC,MAAL,GAAcK,aAAIuC,MAAJ,CAAW,QAAX,EAAqB,EAArB,EAAyB7C,UAAzB,CAAd;;AACA,gBAAA,MAAI,CAAC8C,SAAL;;AATuC;AAAA,uBAUjC,MAAI,CAACC,eAAL,CAAqBhC,IAArB,CAEJ,MAAI,CAACd,MAFD,EAGJ,MAAI,CAACiB,aAAL,CAAmB0B,cAAnB,CAAkC,MAAI,CAACxB,EAAvC,CAHI,CAViC;;AAAA;AAiBvC,iDACE,MAAI,CAACpB,UADP,EAEE,MAAI,CAACG,mBAFP;AAIA6C,gBAAAA,MAAM,CACHC,UADH,CACc,kDADd,EAEGC,WAFH,CAEe,MAAI,CAAC/C,mBAFpB;AArBuC;AAAA;;AAAA;AAyBvC,gBAAA,MAAI,CAACuC,MAAL,CAAYS,KAAZ,CAAkB,WAAlB;;AAzBuC;AA2BzC,gBAAA,MAAI,CAACC,cAAL,CAAoBrC,IAApB,CAAyB,MAAI,CAACK,EAA9B;;AAEA,gBAAA,MAAI,CAACsB,MAAL,CAAYC,KAAZ,iBAA2B,MAAI,CAACvB,EAAhC;;AA7ByC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA3C;AAmCA,WAAKtB,WAAL,GAAmB,KAAKI,KAAL,CAAWa,IAAX,CAAgBsC,OAAhB,EAAnB;AAEA,WAAK3C,MAAL;AACD;;;6BAEe4C,K,EAAe;AAC7B,WAAKZ,MAAL,CAAYC,KAAZ,qBAA+BW,KAAK,CAACC,IAArC,uBAAsD,KAAKnC,EAA3D;AACA,WAAKoC,YAAL,CAAkBC,GAAlB,CAAsBH,KAAtB;AACA,WAAK5C,MAAL;AACD;;;;;;;;;sBAGK,KAAKX,SAAL,IAAkB,KAAKJ,S;;;;;;;;AAI3B,qBAAKI,SAAL,GAAiB,IAAjB;;oBAEK,KAAKF,M;;;;;;uBAEF,KAAKC,W;;;AACX,oBAAI,KAAKH,SAAT,EAAoB;AAClB,uBAAK+D,OAAL;AACD;;AAED,qBAAKhB,MAAL,CAAYiB,IAAZ,CAAiB,gBAAjB;AACA,qBAAKH,YAAL,CAAkBI,UAAlB;AACA,qBAAKC,cAAL,CAAoBC,WAApB;AACA,qBAAKlE,MAAL,GAAc,IAAd;AACA,qBAAKQ,IAAL,CAAU,QAAV;AACA,qBAAKP,MAAL,GAAc,IAAd;;;AAIF,qBAAK2D,YAAL,CAAkBO,YAAlB;AAGA,qBAAKrB,MAAL,CAAYC,KAAZ,iBAA2B,KAAKvB,EAAhC;AAEA,qBAAKrB,SAAL,GAAiB,KAAjB;;;;;;;;;;;;;;;;;;wCAGyC;AACzC,aAAO,KAAKC,UAAZ;AACD;;;8BAEgBgE,I,EAA8B;AAAA;;AAC7C,UAAMC,YAAY,uBAAG,KAAKjE,UAAR,qDAAG,iBAAiBkE,oBAAjB,CAAsC,QAAtC,EAAgD,CAAhD,CAArB;AACA,WAAKxD,MAAL;AACA,UAAMyD,SAAS,GACbH,IAAI,KAAK,KAAT,GACKC,YADL,aACKA,YADL,uBACKA,YAAY,CAAEG,SAAd,CAAwB,YAAxB,CADL,GAEKH,YAFL,aAEKA,YAFL,uBAEKA,YAAY,CAAEG,SAAd,CAAwB,WAAxB,CAHP;AAIA,aAAOD,SAAP;AACD;;;qCAE8C;AAC7C,aAAO,KAAKjD,aAAL,CAAmB0B,cAAnB,CAAkC,KAAKxB,EAAvC,CAAP;AACD;;;8BAEgB;AACf,UAAI,CAAC,KAAKvB,MAAV,EAAkB;AAChB,aAAKF,SAAL,GAAiB,IAAjB;AACA;AACD;;AACD,WAAKS,IAAL,CAAU,SAAV;AAEA,WAAKoD,YAAL,CAAkBE,OAAlB;AACA,WAAKX,eAAL,CAAqBW,OAArB;AACA,WAAK9B,GAAL,CAAS8B,OAAT;AAEA,WAAKtB,kBAAL,CAAwBsB,OAAxB;AACA,WAAKG,cAAL,CAAoBH,OAApB;AACA,WAAK3B,aAAL,CAAmB2B,OAAnB;AACA,WAAKW,kBAAL;AACA,WAAKxE,MAAL,GAAc,KAAd;AACA,sCAAO,KAAKG,UAAZ,EAA0C,KAAKG,mBAA/C;AACA6C,MAAAA,MAAM,CACHC,UADH,CACc,oCADd,EAEGqB,cAFH,CAEkB,KAAKnE,mBAFvB;AAGD;;;oCAcuB;AAAA;;AACtB,UAAMoE,UAAU,GAAGvB,MAAM,CAACwB,gBAA1B;AACA,UAAMC,CAAC,GAAG,2BAAKzE,UAAL,wEAAiB0E,WAAjB,KAAgC,GAA1C;AACA,UAAMC,CAAC,GAAG,2BAAK3E,UAAL,wEAAiB4E,YAAjB,KAAiC,GAA3C;AACA,UAAM3E,MAAM,GAAG,KAAKA,MAApB;;AACA,UAAIA,MAAJ,EAAY;AACVA,QAAAA,MAAM,CAAC4E,KAAP,GAAeJ,CAAC,GAAGF,UAAnB;AACAtE,QAAAA,MAAM,CAAC6E,MAAP,GAAgBH,CAAC,GAAGJ,UAApB;AACAtE,QAAAA,MAAM,CAAC8E,KAAP,CAAaF,KAAb,aAAwBJ,CAAxB;AACAxE,QAAAA,MAAM,CAAC8E,KAAP,CAAaD,MAAb,aAAyBH,CAAzB;AACD;;AACD,WAAK5B,eAAL,CAAqBnC,QAArB,CAA8B;AAC5BoE,QAAAA,CAAC,EAAE,CADyB;AAE5BC,QAAAA,CAAC,EAAE,CAFyB;AAG5BJ,QAAAA,KAAK,EAAEN,UAAU,GAAGE,CAHQ;AAI5BK,QAAAA,MAAM,EAAEP,UAAU,GAAGI;AAJO,OAA9B;AAMD;;;gCAEmB;AAAA;;AAClB,UAAMJ,UAAU,GAAGvB,MAAM,CAACwB,gBAA1B;AACA,UAAMC,CAAC,GAAG,2BAAKzE,UAAL,wEAAiB0E,WAAjB,KAAgC,GAA1C;AACA,UAAMC,CAAC,GAAG,2BAAK3E,UAAL,wEAAiB4E,YAAjB,KAAiC,GAA3C;AACA,UAAM3E,MAAM,GAAG,KAAKA,MAApB;AACAA,MAAAA,MAAM,CAAC4E,KAAP,GAAeJ,CAAC,GAAGF,UAAnB;AACAtE,MAAAA,MAAM,CAAC6E,MAAP,GAAgBH,CAAC,GAAGJ,UAApB;AACAtE,MAAAA,MAAM,CAAC8E,KAAP,CAAaF,KAAb,aAAwBJ,CAAxB;AACAxE,MAAAA,MAAM,CAAC8E,KAAP,CAAaD,MAAb,aAAyBH,CAAzB;AACD;;;kCAOqBO,M,EAA4B;AAChD,WAAK9E,IAAL,CAAU8E,MAAM,CAAClB,IAAjB,EAAuBkB,MAAvB;AACD;;;EA7SgCC,0B","sourcesContent":["// @ts-ignore\nimport { AsyncParallelHook } from '@antv/async-hook';\nimport { DOM } from '@antv/l7-utils';\nimport elementResizeEvent, { unbind } from 'element-resize-event';\nimport { EventEmitter } from 'eventemitter3';\nimport { inject, injectable } from 'inversify';\nimport { TYPES } from '../../types';\nimport { createRendererContainer } from '../../utils/dom';\nimport { IFontService } from '../asset/IFontService';\nimport { IIconService } from '../asset/IIconService';\nimport { ICameraService, IViewport } from '../camera/ICameraService';\nimport { IControlService } from '../component/IControlService';\nimport { IMarkerService } from '../component/IMarkerService';\nimport { IPopupService } from '../component/IPopupService';\nimport { IGlobalConfigService, ISceneConfig } from '../config/IConfigService';\nimport { ICoordinateSystemService } from '../coordinate/ICoordinateSystemService';\nimport {\n  IInteractionService,\n  IInteractionTarget,\n  InteractionEvent,\n} from '../interaction/IInteractionService';\nimport { IPickingService } from '../interaction/IPickingService';\nimport { ILayer, ILayerService } from '../layer/ILayerService';\nimport { ILogService } from '../log/ILogService';\nimport { IMapCamera, IMapConfig, IMapService } from '../map/IMapService';\nimport { IRenderConfig, IRendererService } from '../renderer/IRendererService';\nimport { IShaderModuleService } from '../shader/IShaderModuleService';\nimport { ISceneService } from './ISceneService';\n\n/**\n * will emit `loaded` `resize` `destroy` event panstart panmove panend\n */\n@injectable()\nexport default class Scene extends EventEmitter implements ISceneService {\n  public destroyed: boolean = false;\n\n  public loaded: boolean = false;\n\n  @inject(TYPES.SceneID)\n  private readonly id: string;\n  /**\n   * 使用各种 Service\n   */\n  @inject(TYPES.IIconService)\n  private readonly iconService: IIconService;\n\n  @inject(TYPES.IFontService)\n  private readonly fontService: IFontService;\n\n  @inject(TYPES.IControlService)\n  private readonly controlService: IControlService;\n\n  @inject(TYPES.ILogService)\n  private readonly logger: ILogService;\n\n  @inject(TYPES.IGlobalConfigService)\n  private readonly configService: IGlobalConfigService;\n\n  @inject(TYPES.IMapService)\n  private readonly map: IMapService;\n\n  @inject(TYPES.ICoordinateSystemService)\n  private readonly coordinateSystemService: ICoordinateSystemService;\n\n  @inject(TYPES.IRendererService)\n  private readonly rendererService: IRendererService;\n\n  @inject(TYPES.ILayerService)\n  private readonly layerService: ILayerService;\n\n  @inject(TYPES.ICameraService)\n  private readonly cameraService: ICameraService;\n\n  @inject(TYPES.IInteractionService)\n  private readonly interactionService: IInteractionService;\n\n  @inject(TYPES.IPickingService)\n  private readonly pickingService: IPickingService;\n\n  @inject(TYPES.IShaderModuleService)\n  private readonly shaderModuleService: IShaderModuleService;\n\n  @inject(TYPES.IMarkerService)\n  private readonly markerService: IMarkerService;\n\n  @inject(TYPES.IPopupService)\n  private readonly popupService: IPopupService;\n\n  /**\n   * 是否首次渲染\n   */\n  private inited: boolean = false;\n  private initPromise: Promise<void>;\n\n  // TODO: 改成状态机\n  private rendering: boolean = false;\n\n  /**\n   * canvas 容器\n   */\n  private $container: HTMLDivElement | null;\n\n  private canvas: HTMLCanvasElement;\n\n  private hooks: {\n    init: AsyncParallelHook;\n  };\n\n  public constructor() {\n    super();\n    // @see https://github.com/webpack/tapable#usage\n    this.hooks = {\n      /**\n       * 初始化异步任务，可并行：\n       * 1. initMap：初始化地图底图、相机\n       * 2. initRenderer：初始化渲染引擎\n       * 3. initWorker：初始化 Worker\n       */\n      init: new AsyncParallelHook(),\n    };\n  }\n\n  public init(sceneConfig: ISceneConfig) {\n    // 设置场景配置项\n    this.configService.setSceneConfig(this.id, sceneConfig);\n\n    // 初始化 ShaderModule\n    this.shaderModuleService.registerBuiltinModules();\n\n    // 初始化资源管理 图片\n    this.iconService.init();\n    // 字体资源\n    this.fontService.init();\n\n    /**\n     * 初始化底图\n     */\n    this.hooks.init.tapPromise('initMap', async () => {\n      // 等待首次相机同步\n      await new Promise((resolve) => {\n        this.map.onCameraChanged((viewport: IViewport) => {\n          this.cameraService.init();\n          this.cameraService.update(viewport);\n          resolve();\n        });\n        this.map.init();\n      });\n      // this.controlService.addControls();\n      // 重新绑定非首次相机更新事件\n      this.map.onCameraChanged(this.handleMapCameraChanged);\n      this.map.addMarkerContainer();\n\n      // 初始化未加载的marker;\n      this.markerService.addMarkers();\n      this.markerService.addMarkerLayers();\n      this.popupService.initPopup();\n      // 地图初始化之后 才能初始化 container 上的交互\n      this.interactionService.init();\n      this.interactionService.on(\n        InteractionEvent.Drag,\n        this.addSceneEvent.bind(this),\n      );\n      this.logger.debug(`map ${this.id} loaded`);\n    });\n\n    /**\n     * 初始化渲染引擎\n     */\n    this.hooks.init.tapPromise('initRenderer', async () => {\n      // 创建底图之上的 container\n      const $container = createRendererContainer(\n        this.configService.getSceneConfig(this.id).id || '',\n      );\n      this.$container = $container;\n\n      if ($container) {\n        this.canvas = DOM.create('canvas', '', $container) as HTMLCanvasElement;\n        this.setCanvas();\n        await this.rendererService.init(\n          // @ts-ignore\n          this.canvas,\n          this.configService.getSceneConfig(this.id) as IRenderConfig,\n        );\n        // this.initContainer();\n        // window.addEventListener('resize', this.handleWindowResized);\n        elementResizeEvent(\n          this.$container as HTMLDivElement,\n          this.handleWindowResized,\n        );\n        window\n          .matchMedia('screen and (-webkit-min-device-pixel-ratio: 1.5)')\n          .addListener(this.handleWindowResized);\n      } else {\n        this.logger.error('容器 id 不存在');\n      }\n      this.pickingService.init(this.id);\n\n      this.logger.debug(`scene ${this.id} renderer loaded`);\n    });\n    // TODO：init worker, fontAtlas...\n\n    // 执行异步并行初始化任务\n    // @ts-ignore\n    this.initPromise = this.hooks.init.promise();\n\n    this.render();\n  }\n\n  public addLayer(layer: ILayer) {\n    this.logger.debug(`add layer ${layer.name} to scene ${this.id}`);\n    this.layerService.add(layer);\n    this.render();\n  }\n\n  public async render() {\n    if (this.rendering || this.destroyed) {\n      return;\n    }\n\n    this.rendering = true;\n    // 首次初始化，或者地图的容器被强制销毁的需要重新初始化\n    if (!this.inited) {\n      // 还未初始化完成需要等待\n      await this.initPromise;\n      if (this.destroyed) {\n        this.destroy();\n      }\n      // FIXME: 初始化 marker 容器，可以放到 map 初始化方法中？\n      this.logger.info(' render inited');\n      this.layerService.initLayers();\n      this.controlService.addControls();\n      this.loaded = true;\n      this.emit('loaded');\n      this.inited = true;\n    }\n\n    // 尝试初始化未初始化的图层\n    this.layerService.renderLayers();\n    // 组件需要等待layer 初始化完成之后添加\n\n    this.logger.debug(`scene ${this.id} render`);\n\n    this.rendering = false;\n  }\n\n  public getSceneContainer(): HTMLDivElement {\n    return this.$container as HTMLDivElement;\n  }\n\n  public exportPng(type?: 'png' | 'jpg'): string {\n    const renderCanvas = this.$container?.getElementsByTagName('canvas')[0];\n    this.render();\n    const layersPng =\n      type === 'jpg'\n        ? (renderCanvas?.toDataURL('image/jpeg') as string)\n        : (renderCanvas?.toDataURL('image/png') as string);\n    return layersPng;\n  }\n\n  public getSceneConfig(): Partial<ISceneConfig> {\n    return this.configService.getSceneConfig(this.id as string);\n  }\n\n  public destroy() {\n    if (!this.inited) {\n      this.destroyed = true;\n      return;\n    }\n    this.emit('destroy');\n\n    this.layerService.destroy();\n    this.rendererService.destroy();\n    this.map.destroy();\n\n    this.interactionService.destroy();\n    this.controlService.destroy();\n    this.markerService.destroy();\n    this.removeAllListeners();\n    this.inited = false;\n    unbind(this.$container as HTMLDivElement, this.handleWindowResized);\n    window\n      .matchMedia('screen and (min-resolution: 2dppx)')\n      .removeListener(this.handleWindowResized);\n  }\n\n  private handleWindowResized = () => {\n    this.emit('resize');\n    // @ts-check\n    if (this.$container) {\n      this.initContainer();\n      DOM.triggerResize();\n      this.coordinateSystemService.needRefresh = true;\n\n      //  repaint layers\n      this.render();\n    }\n  };\n  private initContainer() {\n    const pixelRatio = window.devicePixelRatio;\n    const w = this.$container?.clientWidth || 400;\n    const h = this.$container?.clientHeight || 300;\n    const canvas = this.canvas;\n    if (canvas) {\n      canvas.width = w * pixelRatio;\n      canvas.height = h * pixelRatio;\n      canvas.style.width = `${w}px`;\n      canvas.style.height = `${h}px`;\n    }\n    this.rendererService.viewport({\n      x: 0,\n      y: 0,\n      width: pixelRatio * w,\n      height: pixelRatio * h,\n    });\n  }\n\n  private setCanvas() {\n    const pixelRatio = window.devicePixelRatio;\n    const w = this.$container?.clientWidth || 400;\n    const h = this.$container?.clientHeight || 300;\n    const canvas = this.canvas;\n    canvas.width = w * pixelRatio;\n    canvas.height = h * pixelRatio;\n    canvas.style.width = `${w}px`;\n    canvas.style.height = `${h}px`;\n  }\n\n  private handleMapCameraChanged = (viewport: IViewport) => {\n    this.cameraService.update(viewport);\n    this.render();\n  };\n\n  private addSceneEvent(target: IInteractionTarget) {\n    this.emit(target.type, target);\n  }\n}\n"],"file":"SceneService.js"}