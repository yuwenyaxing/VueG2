"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _initializerDefineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerDefineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _applyDecoratedDescriptor2 = _interopRequireDefault(require("@babel/runtime/helpers/applyDecoratedDescriptor"));

var _initializerWarningHelper2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerWarningHelper"));

var _l7Utils = require("@antv/l7-utils");

var _inversify = require("inversify");

var _types = require("../../types");

var _IInteractionService = require("../interaction/IInteractionService");

var _gl = require("../renderer/gl");

var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var PickingService = (_dec = (0, _inversify.injectable)(), _dec2 = (0, _inversify.inject)(_types.TYPES.IRendererService), _dec3 = (0, _inversify.inject)(_types.TYPES.IGlobalConfigService), _dec4 = (0, _inversify.inject)(_types.TYPES.IInteractionService), _dec5 = (0, _inversify.inject)(_types.TYPES.ILayerService), _dec(_class = (_class2 = (_temp = function () {
  function PickingService() {
    var _this = this;

    (0, _classCallCheck2.default)(this, PickingService);
    (0, _initializerDefineProperty2.default)(this, "rendererService", _descriptor, this);
    (0, _initializerDefineProperty2.default)(this, "configService", _descriptor2, this);
    (0, _initializerDefineProperty2.default)(this, "interactionService", _descriptor3, this);
    (0, _initializerDefineProperty2.default)(this, "layerService", _descriptor4, this);
    this.pickingFBO = void 0;
    this.width = 0;
    this.height = 0;
    this.alreadyInPicking = false;
    this.pickBufferScale = 1.0;

    this.pickFromPickingFBO = function (layer, _ref) {
      var _pickedColors;

      var x = _ref.x,
          y = _ref.y,
          lngLat = _ref.lngLat,
          type = _ref.type;
      var isPicked = false;
      var _this$rendererService = _this.rendererService,
          getViewportSize = _this$rendererService.getViewportSize,
          readPixels = _this$rendererService.readPixels,
          getContainer = _this$rendererService.getContainer;

      var _getBoundingClientRec = getContainer().getBoundingClientRect(),
          width = _getBoundingClientRec.width,
          height = _getBoundingClientRec.height;

      width *= window.devicePixelRatio;
      height *= window.devicePixelRatio;

      var _layer$getLayerConfig = layer.getLayerConfig(),
          enableHighlight = _layer$getLayerConfig.enableHighlight,
          enableSelect = _layer$getLayerConfig.enableSelect;

      var xInDevicePixel = x * window.devicePixelRatio;
      var yInDevicePixel = y * window.devicePixelRatio;

      if (xInDevicePixel > width - 1 * window.devicePixelRatio || xInDevicePixel < 0 || yInDevicePixel > height - 1 * window.devicePixelRatio || yInDevicePixel < 0) {
        return false;
      }

      var pickedColors;
      pickedColors = readPixels({
        x: Math.floor(xInDevicePixel / _this.pickBufferScale),
        y: Math.floor((height - (y + 1) * window.devicePixelRatio) / _this.pickBufferScale),
        width: 1,
        height: 1,
        data: new Uint8Array(1 * 1 * 4),
        framebuffer: _this.pickingFBO
      });

      if (pickedColors[0] !== 0 || pickedColors[1] !== 0 || pickedColors[2] !== 0) {
        var pickedFeatureIdx = (0, _l7Utils.decodePickingColor)(pickedColors);
        var rawFeature = layer.getSource().getFeatureById(pickedFeatureIdx);

        if (pickedFeatureIdx !== layer.getCurrentPickId() && type === 'mousemove') {
          type = 'mouseenter';
        }

        var target = {
          x: x,
          y: y,
          type: type,
          lngLat: lngLat,
          featureId: pickedFeatureIdx,
          feature: rawFeature
        };

        if (!rawFeature) {} else {
          isPicked = true;
          layer.setCurrentPickId(pickedFeatureIdx);

          _this.triggerHoverOnLayer(layer, target);
        }
      } else {
        var _target = {
          x: x,
          y: y,
          lngLat: lngLat,
          type: layer.getCurrentPickId() !== null && type === 'mousemove' ? 'mouseout' : 'un' + type,
          featureId: null,
          feature: null
        };

        _this.triggerHoverOnLayer(layer, _objectSpread(_objectSpread({}, _target), {}, {
          type: 'unpick'
        }));

        _this.triggerHoverOnLayer(layer, _target);

        layer.setCurrentPickId(null);
      }

      if (enableHighlight) {
        _this.highlightPickedFeature(layer, pickedColors);
      }

      if (enableSelect && type === 'click' && ((_pickedColors = pickedColors) === null || _pickedColors === void 0 ? void 0 : _pickedColors.toString()) !== [0, 0, 0, 0].toString()) {
        var selectedId = (0, _l7Utils.decodePickingColor)(pickedColors);

        if (layer.getCurrentSelectedId() === null || selectedId !== layer.getCurrentSelectedId()) {
          _this.selectFeature(layer, pickedColors);

          layer.setCurrentSelectedId(selectedId);
        } else {
          _this.selectFeature(layer, new Uint8Array([0, 0, 0, 0]));

          layer.setCurrentSelectedId(null);
        }
      }

      return isPicked;
    };
  }

  (0, _createClass2.default)(PickingService, [{
    key: "init",
    value: function init(id) {
      var _this$rendererService2 = this.rendererService,
          createTexture2D = _this$rendererService2.createTexture2D,
          createFramebuffer = _this$rendererService2.createFramebuffer,
          getViewportSize = _this$rendererService2.getViewportSize,
          getContainer = _this$rendererService2.getContainer;

      var _getBoundingClientRec2 = getContainer().getBoundingClientRect(),
          width = _getBoundingClientRec2.width,
          height = _getBoundingClientRec2.height;

      width *= window.devicePixelRatio;
      height *= window.devicePixelRatio;
      this.pickBufferScale = this.configService.getSceneConfig(id).pickBufferScale || 1;
      this.pickingFBO = createFramebuffer({
        color: createTexture2D({
          width: Math.round(width / this.pickBufferScale),
          height: Math.round(height / this.pickBufferScale),
          wrapS: _gl.gl.CLAMP_TO_EDGE,
          wrapT: _gl.gl.CLAMP_TO_EDGE
        })
      });
      this.interactionService.on(_IInteractionService.InteractionEvent.Hover, this.pickingAllLayer.bind(this));
    }
  }, {
    key: "pickingAllLayer",
    value: function () {
      var _pickingAllLayer = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(target) {
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(this.alreadyInPicking || this.layerService.alreadyInRendering)) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return");

              case 2:
                this.alreadyInPicking = true;
                _context.next = 5;
                return this.pickingLayers(target);

              case 5:
                this.layerService.renderLayers();
                this.alreadyInPicking = false;

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function pickingAllLayer(_x) {
        return _pickingAllLayer.apply(this, arguments);
      }

      return pickingAllLayer;
    }()
  }, {
    key: "pickingLayers",
    value: function () {
      var _pickingLayers = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2(target) {
        var _this2 = this;

        var _this$rendererService3, getViewportSize, useFramebuffer, clear, getContainer, _getBoundingClientRec3, width, height;

        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _this$rendererService3 = this.rendererService, getViewportSize = _this$rendererService3.getViewportSize, useFramebuffer = _this$rendererService3.useFramebuffer, clear = _this$rendererService3.clear, getContainer = _this$rendererService3.getContainer;
                _getBoundingClientRec3 = getContainer().getBoundingClientRect(), width = _getBoundingClientRec3.width, height = _getBoundingClientRec3.height;
                width *= window.devicePixelRatio;
                height *= window.devicePixelRatio;

                if (this.width !== width || this.height !== height) {
                  this.pickingFBO.resize({
                    width: Math.round(width / this.pickBufferScale),
                    height: Math.round(height / this.pickBufferScale)
                  });
                  this.width = width;
                  this.height = height;
                }

                useFramebuffer(this.pickingFBO, function () {
                  var layers = _this2.layerService.getLayers();

                  layers.filter(function (layer) {
                    return layer.needPick(target.type);
                  }).reverse().some(function (layer) {
                    clear({
                      framebuffer: _this2.pickingFBO,
                      color: [0, 0, 0, 0],
                      stencil: 0,
                      depth: 1
                    });
                    layer.hooks.beforePickingEncode.call();
                    layer.renderModels();
                    layer.hooks.afterPickingEncode.call();

                    var isPicked = _this2.pickFromPickingFBO(layer, target);

                    return isPicked && !layer.getLayerConfig().enablePropagation;
                  });
                });

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function pickingLayers(_x2) {
        return _pickingLayers.apply(this, arguments);
      }

      return pickingLayers;
    }()
  }, {
    key: "triggerHoverOnLayer",
    value: function triggerHoverOnLayer(layer, target) {
      layer.emit(target.type, target);
    }
  }, {
    key: "highlightPickedFeature",
    value: function highlightPickedFeature(layer, pickedColors) {
      var _pickedColors2 = (0, _slicedToArray2.default)(pickedColors, 3),
          r = _pickedColors2[0],
          g = _pickedColors2[1],
          b = _pickedColors2[2];

      layer.hooks.beforeHighlight.call([r, g, b]);
    }
  }, {
    key: "selectFeature",
    value: function selectFeature(layer, pickedColors) {
      var _pickedColors3 = (0, _slicedToArray2.default)(pickedColors, 3),
          r = _pickedColors3[0],
          g = _pickedColors3[1],
          b = _pickedColors3[2];

      layer.hooks.beforeSelect.call([r, g, b]);
    }
  }]);
  return PickingService;
}(), _temp), (_descriptor = (0, _applyDecoratedDescriptor2.default)(_class2.prototype, "rendererService", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor2 = (0, _applyDecoratedDescriptor2.default)(_class2.prototype, "configService", [_dec3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor3 = (0, _applyDecoratedDescriptor2.default)(_class2.prototype, "interactionService", [_dec4], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor4 = (0, _applyDecoratedDescriptor2.default)(_class2.prototype, "layerService", [_dec5], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
})), _class2)) || _class);
exports.default = PickingService;
//# sourceMappingURL=PickingService.js.map