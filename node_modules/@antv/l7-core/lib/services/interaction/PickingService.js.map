{"version":3,"sources":["../../../src/services/interaction/PickingService.ts"],"names":["PickingService","TYPES","IRendererService","IGlobalConfigService","IInteractionService","ILayerService","pickingFBO","width","height","alreadyInPicking","pickBufferScale","pickFromPickingFBO","layer","x","y","lngLat","type","isPicked","rendererService","getViewportSize","readPixels","getContainer","getBoundingClientRect","window","devicePixelRatio","getLayerConfig","enableHighlight","enableSelect","xInDevicePixel","yInDevicePixel","pickedColors","Math","floor","data","Uint8Array","framebuffer","pickedFeatureIdx","rawFeature","getSource","getFeatureById","getCurrentPickId","target","featureId","feature","setCurrentPickId","triggerHoverOnLayer","highlightPickedFeature","toString","selectedId","getCurrentSelectedId","selectFeature","setCurrentSelectedId","id","createTexture2D","createFramebuffer","configService","getSceneConfig","color","round","wrapS","gl","CLAMP_TO_EDGE","wrapT","interactionService","on","InteractionEvent","Hover","pickingAllLayer","bind","layerService","alreadyInRendering","pickingLayers","renderLayers","useFramebuffer","clear","resize","layers","getLayers","filter","needPick","reverse","some","stencil","depth","hooks","beforePickingEncode","call","renderModels","afterPickingEncode","enablePropagation","emit","r","g","b","beforeHighlight","beforeSelect"],"mappings":"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","sourcesContent":["import { decodePickingColor, encodePickingColor } from '@antv/l7-utils';\nimport { inject, injectable } from 'inversify';\nimport {\n  IMapService,\n  IRendererService,\n  IShaderModuleService,\n} from '../../index';\nimport { TYPES } from '../../types';\nimport { IGlobalConfigService, ISceneConfig } from '../config/IConfigService';\nimport {\n  IInteractionService,\n  IInteractionTarget,\n  InteractionEvent,\n} from '../interaction/IInteractionService';\nimport { ILayer, ILayerService } from '../layer/ILayerService';\nimport { ILngLat } from '../map/IMapService';\nimport { gl } from '../renderer/gl';\nimport { IFramebuffer } from '../renderer/IFramebuffer';\nimport { IPickingService } from './IPickingService';\n\n@injectable()\nexport default class PickingService implements IPickingService {\n  @inject(TYPES.IRendererService)\n  private rendererService: IRendererService;\n\n  @inject(TYPES.IGlobalConfigService)\n  private readonly configService: IGlobalConfigService;\n\n  @inject(TYPES.IInteractionService)\n  private interactionService: IInteractionService;\n\n  @inject(TYPES.ILayerService)\n  private layerService: ILayerService;\n  private pickingFBO: IFramebuffer;\n\n  private width: number = 0;\n\n  private height: number = 0;\n\n  private alreadyInPicking: boolean = false;\n\n  private pickBufferScale: number = 1.0;\n\n  public init(id: string) {\n    const {\n      createTexture2D,\n      createFramebuffer,\n      getViewportSize,\n      getContainer,\n    } = this.rendererService;\n    let {\n      width,\n      height,\n    } = (getContainer() as HTMLElement).getBoundingClientRect();\n    width *= window.devicePixelRatio;\n    height *= window.devicePixelRatio;\n    this.pickBufferScale =\n      this.configService.getSceneConfig(id).pickBufferScale || 1;\n    // 创建 picking framebuffer，后续实时 resize\n    this.pickingFBO = createFramebuffer({\n      color: createTexture2D({\n        width: Math.round(width / this.pickBufferScale),\n        height: Math.round(height / this.pickBufferScale),\n        wrapS: gl.CLAMP_TO_EDGE,\n        wrapT: gl.CLAMP_TO_EDGE,\n      }),\n    });\n\n    // 监听 hover 事件\n    this.interactionService.on(\n      InteractionEvent.Hover,\n      this.pickingAllLayer.bind(this),\n    );\n  }\n  private async pickingAllLayer(target: IInteractionTarget) {\n    if (this.alreadyInPicking || this.layerService.alreadyInRendering) {\n      return;\n    }\n    this.alreadyInPicking = true;\n    await this.pickingLayers(target);\n    this.layerService.renderLayers();\n    this.alreadyInPicking = false;\n  }\n  private async pickingLayers(target: IInteractionTarget) {\n    const {\n      getViewportSize,\n      useFramebuffer,\n      clear,\n      getContainer,\n    } = this.rendererService;\n    let {\n      width,\n      height,\n    } = (getContainer() as HTMLElement).getBoundingClientRect();\n    width *= window.devicePixelRatio;\n    height *= window.devicePixelRatio;\n    if (this.width !== width || this.height !== height) {\n      this.pickingFBO.resize({\n        width: Math.round(width / this.pickBufferScale),\n        height: Math.round(height / this.pickBufferScale),\n      });\n      this.width = width;\n      this.height = height;\n    }\n\n    useFramebuffer(this.pickingFBO, () => {\n      const layers = this.layerService.getLayers();\n      layers\n        .filter((layer) => layer.needPick(target.type))\n        .reverse()\n        .some((layer) => {\n          clear({\n            framebuffer: this.pickingFBO,\n            color: [0, 0, 0, 0],\n            stencil: 0,\n            depth: 1,\n          });\n          layer.hooks.beforePickingEncode.call();\n          layer.renderModels();\n          layer.hooks.afterPickingEncode.call();\n          const isPicked = this.pickFromPickingFBO(layer, target);\n          return isPicked && !layer.getLayerConfig().enablePropagation;\n        });\n    });\n  }\n  private pickFromPickingFBO = (\n    layer: ILayer,\n    { x, y, lngLat, type }: IInteractionTarget,\n  ) => {\n    let isPicked = false;\n    const { getViewportSize, readPixels, getContainer } = this.rendererService;\n    let {\n      width,\n      height,\n    } = (getContainer() as HTMLElement).getBoundingClientRect();\n    width *= window.devicePixelRatio;\n    height *= window.devicePixelRatio;\n    const { enableHighlight, enableSelect } = layer.getLayerConfig();\n\n    const xInDevicePixel = x * window.devicePixelRatio;\n    const yInDevicePixel = y * window.devicePixelRatio;\n    if (\n      xInDevicePixel > width - 1 * window.devicePixelRatio ||\n      xInDevicePixel < 0 ||\n      yInDevicePixel > height - 1 * window.devicePixelRatio ||\n      yInDevicePixel < 0\n    ) {\n      return false;\n    }\n    let pickedColors: Uint8Array | undefined;\n    pickedColors = readPixels({\n      x: Math.floor(xInDevicePixel / this.pickBufferScale),\n      // 视口坐标系原点在左上，而 WebGL 在左下，需要翻转 Y 轴\n      y: Math.floor(\n        (height - (y + 1) * window.devicePixelRatio) / this.pickBufferScale,\n      ),\n      width: 1,\n      height: 1,\n      data: new Uint8Array(1 * 1 * 4),\n      framebuffer: this.pickingFBO,\n    });\n    if (\n      pickedColors[0] !== 0 ||\n      pickedColors[1] !== 0 ||\n      pickedColors[2] !== 0\n    ) {\n      const pickedFeatureIdx = decodePickingColor(pickedColors);\n      const rawFeature = layer.getSource().getFeatureById(pickedFeatureIdx);\n      if (\n        pickedFeatureIdx !== layer.getCurrentPickId() &&\n        type === 'mousemove'\n      ) {\n        type = 'mouseenter';\n      }\n\n      const target = {\n        x,\n        y,\n        type,\n        lngLat,\n        featureId: pickedFeatureIdx,\n        feature: rawFeature,\n      };\n      if (!rawFeature) {\n        // this.logger.error(\n        //   '未找到颜色编码解码后的原始 feature，请检查 fragment shader 中末尾是否添加了 `gl_FragColor = filterColor(gl_FragColor);`',\n        // );\n      } else {\n        // trigger onHover/Click callback on layer\n        isPicked = true;\n        layer.setCurrentPickId(pickedFeatureIdx);\n        this.triggerHoverOnLayer(layer, target); // 触发拾取事件\n      }\n    } else {\n      // 未选中\n      const target = {\n        x,\n        y,\n        lngLat,\n        type:\n          layer.getCurrentPickId() !== null && type === 'mousemove'\n            ? 'mouseout'\n            : 'un' + type,\n        featureId: null,\n        feature: null,\n      };\n      this.triggerHoverOnLayer(layer, {\n        ...target,\n        type: 'unpick',\n      });\n      this.triggerHoverOnLayer(layer, target);\n      layer.setCurrentPickId(null);\n    }\n\n    if (enableHighlight) {\n      this.highlightPickedFeature(layer, pickedColors);\n    }\n    if (\n      enableSelect &&\n      type === 'click' &&\n      pickedColors?.toString() !== [0, 0, 0, 0].toString()\n    ) {\n      const selectedId = decodePickingColor(pickedColors);\n      if (\n        layer.getCurrentSelectedId() === null ||\n        selectedId !== layer.getCurrentSelectedId()\n      ) {\n        this.selectFeature(layer, pickedColors);\n        layer.setCurrentSelectedId(selectedId);\n      } else {\n        this.selectFeature(layer, new Uint8Array([0, 0, 0, 0])); // toggle select\n        layer.setCurrentSelectedId(null);\n      }\n    }\n    return isPicked;\n  };\n  private triggerHoverOnLayer(\n    layer: ILayer,\n    target: {\n      x: number;\n      y: number;\n      type: string;\n      lngLat: ILngLat;\n      feature: unknown;\n      featureId: number | null;\n    },\n  ) {\n    layer.emit(target.type, target);\n  }\n\n  /**\n   * highlight 如果直接修改选中 feature 的 buffer，存在两个问题：\n   * 1. 鼠标移走时无法恢复\n   * 2. 无法实现高亮颜色与原始原色的 alpha 混合\n   * 因此高亮还是放在 shader 中做比较好\n   * @example\n   * this.layer.color('name', ['#000000'], {\n   *  featureRange: {\n   *    startIndex: pickedFeatureIdx,\n   *    endIndex: pickedFeatureIdx + 1,\n   *  },\n   * });\n   */\n  private highlightPickedFeature(\n    layer: ILayer,\n    pickedColors: Uint8Array | undefined,\n  ) {\n    const [r, g, b] = pickedColors;\n    layer.hooks.beforeHighlight.call([r, g, b]);\n  }\n\n  private selectFeature(layer: ILayer, pickedColors: Uint8Array | undefined) {\n    const [r, g, b] = pickedColors;\n    layer.hooks.beforeSelect.call([r, g, b]);\n  }\n}\n"],"file":"PickingService.js"}